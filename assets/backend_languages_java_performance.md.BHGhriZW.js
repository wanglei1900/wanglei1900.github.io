import{_ as e,C as h,c as r,o as i,a7 as p,b as k,j as a,w as n,a as t,G as d,a8 as o}from"./chunks/framework.Dtft01Yp.js";const C=JSON.parse('{"title":"Java 性能调优全面指南","description":"","frontmatter":{},"headers":[],"relativePath":"backend/languages/java/performance.md","filePath":"backend/languages/java/performance.md","lastUpdated":1752569659000}'),g={name:"backend/languages/java/performance.md"};function E(c,s,b,u,y,F){const l=h("Mermaid");return i(),r("div",null,[s[1]||(s[1]=p(`<h1 id="java-性能调优全面指南" tabindex="-1">Java 性能调优全面指南 <a class="header-anchor" href="#java-性能调优全面指南" aria-label="Permalink to &quot;Java 性能调优全面指南&quot;">​</a></h1><h2 id="一、jvm-调优基础" tabindex="-1">一、JVM 调优基础 <a class="header-anchor" href="#一、jvm-调优基础" aria-label="Permalink to &quot;一、JVM 调优基础&quot;">​</a></h2><h3 id="_1-1-调优核心原则" tabindex="-1">1.1 调优核心原则 <a class="header-anchor" href="#_1-1-调优核心原则" aria-label="Permalink to &quot;1.1 调优核心原则&quot;">​</a></h3><ul><li><strong>目标导向</strong>：明确优化方向（低延迟/高吞吐/低内存）</li><li><strong>数据驱动</strong>：基于监控数据定位瓶颈，避免盲目调整</li><li><strong>持续迭代</strong>：调优是“监控→分析→调整→验证”的闭环过程</li></ul><h3 id="_1-2-常见性能瓶颈" tabindex="-1">1.2 常见性能瓶颈 <a class="header-anchor" href="#_1-2-常见性能瓶颈" aria-label="Permalink to &quot;1.2 常见性能瓶颈&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>表现</th><th>定位工具</th></tr></thead><tbody><tr><td><strong>内存问题</strong></td><td>Full GC 频繁、OOM</td><td>jstat、VisualVM、MAT</td></tr><tr><td><strong>CPU 过高</strong></td><td>响应延迟、吞吐下降</td><td>YourKit、jstack、Arthas</td></tr><tr><td><strong>线程问题</strong></td><td>线程阻塞、死锁</td><td>jstack、Arthas thread</td></tr><tr><td><strong>I/O 瓶颈</strong></td><td>I/O 等待高、响应慢</td><td>pidstat、异步 I/O</td></tr></tbody></table><h2 id="二、内存管理优化" tabindex="-1">二、内存管理优化 <a class="header-anchor" href="#二、内存管理优化" aria-label="Permalink to &quot;二、内存管理优化&quot;">​</a></h2><h3 id="_2-1-对象创建优化" tabindex="-1">2.1 对象创建优化 <a class="header-anchor" href="#_2-1-对象创建优化" aria-label="Permalink to &quot;2.1 对象创建优化&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 反例：循环内字符串拼接（每次循环创建新对象）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正例：使用 StringBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StringBuilder sb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Item&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅创建1个对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2-2-对象复用技术" tabindex="-1">2.2 对象复用技术 <a class="header-anchor" href="#_2-2-对象复用技术" aria-label="Permalink to &quot;2.2 对象复用技术&quot;">​</a></h3><ul><li><strong>对象池化</strong>：数据库连接池、线程池、自定义对象池</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 GenericObjectPool 实现对象池</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ObjectPool&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; orderPool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GenericObjectPool&lt;&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasePooledObjectFactory&lt;&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Order </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenericObjectPoolConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMaxTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>缓存优化</strong>：避免无限增长的缓存</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Guava Cache 设置上限和过期策略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LoadingCache&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CacheBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maximumSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expireAfterAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.HOURS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadFromDB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-3-数据结构优化" tabindex="-1">2.3 数据结构优化 <a class="header-anchor" href="#_2-3-数据结构优化" aria-label="Permalink to &quot;2.3 数据结构优化&quot;">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>错误选择</th><th>优化方案</th></tr></thead><tbody><tr><td><strong>高频查询</strong></td><td>ArrayList 遍历（O(n)）</td><td>HashMap（O(1)）</td></tr><tr><td><strong>频繁增删</strong></td><td>数组拷贝开销大</td><td>LinkedList（O(1)）</td></tr><tr><td><strong>并发访问</strong></td><td>HashMap 线程不安全</td><td>ConcurrentHashMap</td></tr><tr><td><strong>去重操作</strong></td><td>双重循环（O(n²)）</td><td>HashSet（O(n)）</td></tr></tbody></table><h2 id="三、多线程与并发优化" tabindex="-1">三、多线程与并发优化 <a class="header-anchor" href="#三、多线程与并发优化" aria-label="Permalink to &quot;三、多线程与并发优化&quot;">​</a></h2><h3 id="_3-1-线程池配置" tabindex="-1">3.1 线程池配置 <a class="header-anchor" href="#_3-1-线程池配置" aria-label="Permalink to &quot;3.1 线程池配置&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建固定大小线程池（避免线程频繁创建）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecutorService executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">availableProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // CPU核心数×2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 任务提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-2-锁竞争优化" tabindex="-1">3.2 锁竞争优化 <a class="header-anchor" href="#_3-2-锁竞争优化" aria-label="Permalink to &quot;3.2 锁竞争优化&quot;">​</a></h3><ul><li><strong>减少锁粒度</strong>：用 ConcurrentHashMap 代替同步的 HashMap</li><li><strong>读写分离</strong>：ReentrantReadWriteLock 实现读多写少场景</li><li><strong>无锁编程</strong>：AtomicInteger 等原子类替代锁</li><li><strong>本地存储</strong>：ThreadLocal 避免共享资源竞争</li></ul><h2 id="四、i-o-与数据库优化" tabindex="-1">四、I/O 与数据库优化 <a class="header-anchor" href="#四、i-o-与数据库优化" aria-label="Permalink to &quot;四、I/O 与数据库优化&quot;">​</a></h2><h3 id="_4-1-异步-i-o-实践" tabindex="-1">4.1 异步 I/O 实践 <a class="header-anchor" href="#_4-1-异步-i-o-实践" aria-label="Permalink to &quot;4.1 异步 I/O 实践&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 NIO 非阻塞读写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (AsynchronousFileChannel channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsynchronousFileChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ByteBuffer buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Future&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 继续执行其他任务...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要时获取结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-2-数据库访问优化" tabindex="-1">4.2 数据库访问优化 <a class="header-anchor" href="#_4-2-数据库访问优化" aria-label="Permalink to &quot;4.2 数据库访问优化&quot;">​</a></h3><table tabindex="0"><thead><tr><th>优化点</th><th>方案</th><th>收益</th></tr></thead><tbody><tr><td><strong>SQL 执行</strong></td><td>PreparedStatement 替代 Statement</td><td>避免 SQL 注入，提升复用率</td></tr><tr><td><strong>批量操作</strong></td><td>addBatch() + executeBatch()</td><td>减少网络往返</td></tr><tr><td><strong>索引优化</strong></td><td>避免全表扫描，覆盖索引</td><td>查询速度提升 10-100 倍</td></tr><tr><td><strong>连接管理</strong></td><td>HikariCP 等连接池</td><td>避免连接创建开销</td></tr></tbody></table><h2 id="五、垃圾回收机制与调优" tabindex="-1">五、垃圾回收机制与调优 <a class="header-anchor" href="#五、垃圾回收机制与调优" aria-label="Permalink to &quot;五、垃圾回收机制与调优&quot;">​</a></h2><h3 id="_5-1-gc-算法对比" tabindex="-1">5.1 GC 算法对比 <a class="header-anchor" href="#_5-1-gc-算法对比" aria-label="Permalink to &quot;5.1 GC 算法对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th>算法</th><th>适用场景</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>Serial GC</strong></td><td>客户端/小内存</td><td>简单高效</td><td>单线程 STW 长</td></tr><tr><td><strong>Parallel GC</strong></td><td>后台批处理</td><td>高吞吐量</td><td>STW 不可控</td></tr><tr><td><strong>CMS GC</strong></td><td>低延迟要求</td><td>并发收集</td><td>内存碎片多</td></tr><tr><td><strong>G1 GC</strong></td><td>大堆通用场景</td><td>可预测停顿</td><td>JDK8+ 默认</td></tr><tr><td><strong>ZGC/Shenandoah</strong></td><td>极低延迟</td><td>停顿 &lt;10ms</td><td>内存占用高</td></tr></tbody></table><h3 id="_5-2-g1-gc-参数配置" tabindex="-1">5.2 G1 GC 参数配置 <a class="header-anchor" href="#_5-2-g1-gc-参数配置" aria-label="Permalink to &quot;5.2 G1 GC 参数配置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xms6g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xmx6g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 堆大小固定</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+UseG1GC</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # 启用 G1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:MaxGCPauseMillis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=50</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 目标停顿时间</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 高级调优</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:G1HeapRegionSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=4m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # Region 大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:InitiatingHeapOccupancyPercent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=35</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 并发周期触发阈值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:G1ReservePercent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 预留内存比例</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="六、监控工具实战指南" tabindex="-1">六、监控工具实战指南 <a class="header-anchor" href="#六、监控工具实战指南" aria-label="Permalink to &quot;六、监控工具实战指南&quot;">​</a></h2><h3 id="_6-1-jvm-原生工具链" tabindex="-1">6.1 JVM 原生工具链 <a class="header-anchor" href="#_6-1-jvm-原生工具链" aria-label="Permalink to &quot;6.1 JVM 原生工具链&quot;">​</a></h3><table tabindex="0"><thead><tr><th>工具</th><th>命令示例</th><th>用途</th></tr></thead><tbody><tr><td><strong>jstat</strong></td><td><code>jstat -gcutil PID 1000 5</code></td><td>实时 GC 监控</td></tr><tr><td><strong>jmap</strong></td><td><code>jmap -dump:live,file=heap.hprof PID</code></td><td>堆转储生成</td></tr><tr><td><strong>jstack</strong></td><td><code>jstack -l PID &gt; thread.txt</code></td><td>线程快照分析</td></tr><tr><td><strong>jcmd</strong></td><td><code>jcmd PID VM.flags</code></td><td>多功能诊断</td></tr></tbody></table><h3 id="_6-2-可视化分析工具" tabindex="-1">6.2 可视化分析工具 <a class="header-anchor" href="#_6-2-可视化分析工具" aria-label="Permalink to &quot;6.2 可视化分析工具&quot;">​</a></h3><ul><li><strong>VisualVM</strong>：JDK 自带，监控内存/线程/CPU</li><li><strong>MAT</strong>：堆转储分析，定位内存泄漏</li><li><strong>Arthas</strong>：实时诊断，支持热修复</li><li><strong>MyPerf4J</strong>：无侵入式 APM，监控方法级性能</li></ul><h2 id="七、代码级优化技巧" tabindex="-1">七、代码级优化技巧 <a class="header-anchor" href="#七、代码级优化技巧" aria-label="Permalink to &quot;七、代码级优化技巧&quot;">​</a></h2><h3 id="_7-1-方法内联优化" tabindex="-1">7.1 方法内联优化 <a class="header-anchor" href="#_7-1-方法内联优化" aria-label="Permalink to &quot;7.1 方法内联优化&quot;">​</a></h3><ul><li><strong>优化原则</strong>：保持方法简洁（&lt;325 字节）</li><li><strong>检测工具</strong>：<code>jarScan --mode=maxMethodSize --limit=325 app.jar</code></li><li><strong>收益</strong>：内联方法比普通调用快 2-5 倍</li></ul><h3 id="_7-2-面向性能的-oop" tabindex="-1">7.2 面向性能的 OOP <a class="header-anchor" href="#_7-2-面向性能的-oop" aria-label="Permalink to &quot;7.2 面向性能的 OOP&quot;">​</a></h3><ul><li><strong>组合优于继承</strong>：减少虚方法调用（vtable 查找开销）</li><li><strong>避免深度继承</strong>：超过 3 层的继承链影响内联</li><li><strong>final 修饰</strong>：帮助 JIT 做去虚拟化优化</li></ul><h2 id="八、高级调优技巧" tabindex="-1">八、高级调优技巧 <a class="header-anchor" href="#八、高级调优技巧" aria-label="Permalink to &quot;八、高级调优技巧&quot;">​</a></h2><h3 id="_8-1-低延迟-gc-实战-shenandoah" tabindex="-1">8.1 低延迟 GC 实战（Shenandoah） <a class="header-anchor" href="#_8-1-低延迟-gc-实战-shenandoah" aria-label="Permalink to &quot;8.1 低延迟 GC 实战（Shenandoah）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shenandoah 启动参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -XX:+UseShenandoahGC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     -XX:ShenandoahGCThreshold=70</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 触发阈值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     -XX:ShenandoahPacingMaxDelay</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 最大</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 延迟</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     -Xlog:gc*:file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=gc.log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 详细日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.jar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_8-2-元空间优化" tabindex="-1">8.2 元空间优化 <a class="header-anchor" href="#_8-2-元空间优化" aria-label="Permalink to &quot;8.2 元空间优化&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:MetaspaceSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=128m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 初始大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:MaxMetaspaceSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=256m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 防止无限增长</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="九、调优禁忌与误区" tabindex="-1">九、调优禁忌与误区 <a class="header-anchor" href="#九、调优禁忌与误区" aria-label="Permalink to &quot;九、调优禁忌与误区&quot;">​</a></h2><ul><li><strong>❌ 堆内存越大越好</strong> → 过大会延长 GC 时间</li><li><strong>❌ 盲目启用压缩指针</strong> → 32G 以上堆禁用<code>-XX:-UseCompressedOops</code></li><li><strong>❌ Full GC 后立即重启</strong> → 应先分析堆转储</li><li><strong>❌ 过度优化</strong> → 遵循 80/20 法则，聚焦瓶颈点</li></ul><h2 id="十、总结-性能调优闭环" tabindex="-1">十、总结：性能调优闭环 <a class="header-anchor" href="#十、总结-性能调优闭环" aria-label="Permalink to &quot;十、总结：性能调优闭环&quot;">​</a></h2>`,49)),(i(),k(o,null,{default:n(()=>[d(l,{id:"mermaid-557",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E8%AE%BE%E5%AE%9A%E7%9B%AE%E6%A0%87%5D%20--%3E%20B%5B%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%5D%0A%20%20%20%20B%20--%3E%20C%5B%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%5D%0A%20%20%20%20C%20--%3E%20D%5B%E5%AE%9A%E4%BD%8D%E7%93%B6%E9%A2%88%5D%0A%20%20%20%20D%20--%3E%20E%5B%E5%AE%9E%E6%96%BD%E4%BC%98%E5%8C%96%5D%0A%20%20%20%20E%20--%3E%20F%5B%E9%AA%8C%E8%AF%81%E6%95%88%E6%9E%9C%5D%0A%20%20%20%20F%20--%3E%7C%E6%9C%AA%E8%BE%BE%E6%A0%87%7C%20C%0A%20%20%20%20F%20--%3E%7C%E8%BE%BE%E6%A0%87%7C%20G%5B%E5%BD%92%E6%A1%A3%E9%85%8D%E7%BD%AE%5D%0A"})]),fallback:n(()=>s[0]||(s[0]=[t(" Loading... ")])),_:1})),s[2]||(s[2]=a("blockquote",null,[a("p",null,[a("strong",null,"学习资源推荐"),t("：")]),a("ul",null,[a("li",null,"书籍：《深入理解Java虚拟机》"),a("li",null,"工具：Arthas、VisualVM、YourKit"),a("li",null,"实践：GC 日志分析、堆转储解析、压力测试")])],-1)),s[3]||(s[3]=a("p",null,"通过本指南的系统学习，您将掌握从 JVM 原理到代码实践的完整调优能力，有效解决内存泄漏、GC 停顿、CPU 过载等典型性能问题。",-1))])}const A=e(g,[["render",E]]);export{C as __pageData,A as default};
