import{_ as a,c as i,o as t,a7 as e}from"./chunks/framework.Dtft01Yp.js";const b=JSON.parse('{"title":"分片上传知识点","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/web/upload/base.md","filePath":"frontend/web/upload/base.md","lastUpdated":1751016452000}'),n={name:"frontend/web/upload/base.md"};function l(h,s,r,p,d,k){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="分片上传知识点" tabindex="-1">分片上传知识点 <a class="header-anchor" href="#分片上传知识点" aria-label="Permalink to &quot;分片上传知识点&quot;">​</a></h1><h2 id="_1-xmlhttprequest-upload" tabindex="-1">1 XMLHttpRequest.upload <a class="header-anchor" href="#_1-xmlhttprequest-upload" aria-label="Permalink to &quot;1 XMLHttpRequest.upload&quot;">​</a></h2><blockquote><p>XMLHttpRequest.upload 属性返回一个 XMLHttpRequestUpload对象，用来表示上传的进度。这个对象是不透明的，但是作为一个XMLHttpRequestEventTarget，可以通过对其绑定事件来追踪它的进度。</p></blockquote><table tabindex="0"><thead><tr><th>事件</th><th>相应属性的信息类型</th></tr></thead><tbody><tr><td>onloadstart</td><td>获取开始</td></tr><tr><td>onprogress</td><td>数据传输进行中</td></tr><tr><td>onabort</td><td>获取操作终止</td></tr><tr><td>onerror</td><td>获取失败</td></tr><tr><td>onload</td><td>获取成功</td></tr><tr><td>ontimeout</td><td>获取操作在用户规定的时间内未完成</td></tr><tr><td>onloadend</td><td>获取完成（不论成功与否）</td></tr></tbody></table><hr><br><br><h2 id="_2-formdata" tabindex="-1">2 formData <a class="header-anchor" href="#_2-formdata" aria-label="Permalink to &quot;2 formData&quot;">​</a></h2><blockquote><p>FormData 接口提供了一种表示表单数据的键值对 key/value 的构造方式，并且可以轻松的将数据通过XMLHttpRequest.send() 方法发送出去，本接口和此方法都相当简单直接。</p></blockquote><ul><li><p>如果送出时的编码类型被设为 <code>multipart/form-data</code>，它会使用和表单一样的格式。</p></li><li><p>如果你想构建一个简单的GET请求，并且通过<code>&lt;form&gt;</code>的形式带有查询参数，可以将它直接传递给URLSearchParams。</p></li><li><p>实现了 <strong>FormData</strong> 接口的对象可以直接在for...of结构中使用，而不需要调用entries() : for (var p of myFormData) 的作用和 for (var p of myFormData.entries()) 是相同的。</p></li></ul><br><h3 id="_2-1-使用" tabindex="-1">2.1 使用 <a class="header-anchor" href="#_2-1-使用" aria-label="Permalink to &quot;2.1 使用&quot;">​</a></h3><p><code>new FormData()</code></p><br><h3 id="_2-2-方法" tabindex="-1">2.2 方法 <a class="header-anchor" href="#_2-2-方法" aria-label="Permalink to &quot;2.2 方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>FormData.append()</code></td><td>向 FormData 中添加新的属性值，FormData 对应的属性值存在也不会覆盖原值，而是新增一个值，如果属性不存在则新增一项属性值。</td></tr><tr><td><code>FormData.delete()</code></td><td>从 FormData 对象里面删除一个键值对。</td></tr><tr><td><code>FormData.entries()</code></td><td>返回一个包含所有键值对的iterator对象。</td></tr><tr><td><code>FormData.get()</code></td><td>返回在 FormData 对象中与给定键关联的第一个值。</td></tr><tr><td><code>FormData.getAll()</code></td><td>返回一个包含 FormData 对象中与给定键关联的所有值的数组。</td></tr><tr><td><code>FormData.has()</code></td><td>返回一个布尔值表明 FormData 对象是否包含某些键。</td></tr><tr><td><code>FormData.keys()</code></td><td>返回一个包含所有键的iterator对象。</td></tr><tr><td><code>FormData.set()</code></td><td>给 FormData 设置属性值，如果FormData 对应的属性值存在则覆盖原值，否则新增一项属性值。</td></tr><tr><td><code>FormData.values()</code></td><td>返回一个包含所有值的iterator对象。</td></tr></tbody></table><br><h3 id="_2-3-为什么只用formdata-multipart-form-data-进行上传大文件" tabindex="-1">2.3 为什么只用formData（multipart/form-data）进行上传大文件 <a class="header-anchor" href="#_2-3-为什么只用formdata-multipart-form-data-进行上传大文件" aria-label="Permalink to &quot;2.3 为什么只用formData（multipart/form-data）进行上传大文件&quot;">​</a></h3><p>🚩 <a href="https://www.cnblogs.com/wanglei1900/p/17177303.html" target="_blank" rel="noreferrer">详见文件常见传输数据格式 【HTTP】Content-Type 与 MIME，站内跳转</a></p><p><strong>application/x-www-form-urlencoded</strong> 是把数据使用 <strong>url编码</strong> 后传送给后端，不适合用于传输大型二进制数据或者包含非ASCII字符的数据， <strong>application/json</strong> 得到的只是一个描述性JSON对象，根本就不是一个文件对象。 如果说一定得需要用 <strong>json</strong> 来传递的话，那么就必须得把这个原生的 <strong>file</strong> 对象进行转码，例如：base64，然后后端在接收的时候按照 <strong>json</strong> 来解析，获取那一段字符串之后重新转码生成图像文件，过程确实繁琐了。</p><hr><br><br><h2 id="_3-file对象" tabindex="-1">3 File对象 <a class="header-anchor" href="#_3-file对象" aria-label="Permalink to &quot;3 File对象&quot;">​</a></h2><blockquote><p>File 对象提供有关文件的信息，并允许网页中的 JavaScript 读写文件。</p></blockquote><p><strong>File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。比如说， FileReader, URL.createObjectURL(), createImageBitmap() (en-US), 及 XMLHttpRequest.send() 都能处理 Blob 和 File。</strong></p><br><h3 id="_3-1-属性" tabindex="-1">3.1 属性 <a class="header-anchor" href="#_3-1-属性" aria-label="Permalink to &quot;3.1 属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>是否只读</th><th>描述</th></tr></thead><tbody><tr><td><code>File.lastModified</code></td><td>只读</td><td>返回当前 File 对象所引用文件最后修改时间，自 UNIX 时间起始值（1970 年 1 月 1 日 00:00:00 UTC）以来的毫秒数。</td></tr><tr><td><code>File.lastModifiedDate</code>（已弃用）</td><td>只读</td><td>返回当前 File 对象所引用文件最后修改时间的 Date 对象。</td></tr><tr><td><code>File.name</code></td><td>只读</td><td>返回当前 File 对象所引用文件的名字。</td></tr><tr><td><code>File.size</code></td><td>只读</td><td>返回文件的大小。File.webkitRelativePath 只读 非标准返回 File 相关的 path 或 URL。</td></tr><tr><td><code>File.type</code></td><td>只读</td><td>返回文件的 多用途互联网邮件扩展类型（MIME Type）</td></tr></tbody></table><br><h3 id="_3-2-方法" tabindex="-1">3.2 方法 <a class="header-anchor" href="#_3-2-方法" aria-label="Permalink to &quot;3.2 方法&quot;">​</a></h3><p><code>Blob.slice([start[, end[, contentType]]])</code></p><p>返回一个新的 Blob 对象，它包含有源 Blob 对象中指定范围内的数据。</p><hr><br><br><h2 id="_4-filelist对象" tabindex="-1">4 FileList对象 <a class="header-anchor" href="#_4-filelist对象" aria-label="Permalink to &quot;4 FileList对象&quot;">​</a></h2><blockquote><p>一个 FileList 对象通常来自于一个 HTML<code>&lt;input&gt;</code>元素的 files 属性，你可以通过这个对象访问到用户所选择的文件。该类型的对象还有可能来自用户的拖放操作，查看 DataTransfer (en-US) 对象了解详情。</p></blockquote><br><h3 id="_4-1-属性-length" tabindex="-1">4.1 属性：length <a class="header-anchor" href="#_4-1-属性-length" aria-label="Permalink to &quot;4.1 属性：length&quot;">​</a></h3><p>FileList是一个类数组对象，每个成员都是一个 File对象 实例，通过<code>.length</code>来获取当前类表中的文件数量</p><p>ps: 类数组也可以用数组解构的方式</p><br><h3 id="_4-2-方法-item" tabindex="-1">4.2 方法：item() <a class="header-anchor" href="#_4-2-方法-item" aria-label="Permalink to &quot;4.2 方法：item()&quot;">​</a></h3><p>根据给定的索引值，返回 <strong>FileList</strong> 对象中对应的 <strong>File</strong> 对象。也可以直接数组索引获取，因为是类数组。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 遍历所有文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 取得一个文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这样也行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files[i];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 取得文件名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><br><br><h2 id="_5-input-按钮上传按钮-上传相关" tabindex="-1">5 input 按钮上传按钮（上传相关） <a class="header-anchor" href="#_5-input-按钮上传按钮-上传相关" aria-label="Permalink to &quot;5 input 按钮上传按钮（上传相关）&quot;">​</a></h2><blockquote><p>带有 type=&quot;file&quot; 的 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素允许用户可以从他们的设备中选择一个或多个文件。选择后，这些文件可以使用提交表单的方式上传到服务器上，或者通过 Javascript 代码和文件 API 对文件进行操作。</p></blockquote><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>值</td><td>value表示已选择文件的路径字符串</td></tr><tr><td>事件</td><td>change 和 input</td></tr><tr><td>支持的公共属性</td><td>required</td></tr><tr><td>附加属性</td><td>accept、capture 和 multiple</td></tr><tr><td>IDL 属性</td><td>files 和 value</td></tr><tr><td>DOM接口</td><td>HTMLInputElement</td></tr><tr><td>方法</td><td>select()</td></tr></tbody></table><br><h3 id="_5-1-值" tabindex="-1">5.1 值 <a class="header-anchor" href="#_5-1-值" aria-label="Permalink to &quot;5.1 值&quot;">​</a></h3><p><strong>value</strong> 为选择文件的路径，格式为字符串，默认为空串<code>&quot;&quot;</code>,使用<code>.value</code>表示选中文件列表中的第一个。如果是开启<strong>multiple属性</strong>选择多个文件，可以通过ELEMENT节点<code>.files</code>来访问 <strong>FileList</strong></p><blockquote><p>注意 为了安全，值的路径显示为<code>C:\\fakepath\\</code>，而非真实路径</p></blockquote><br><h3 id="_5-2-事件" tabindex="-1">5.2 事件 <a class="header-anchor" href="#_5-2-事件" aria-label="Permalink to &quot;5.2 事件&quot;">​</a></h3><p>当值发生改变时，触发这两个事件。input事件：输输入框内容发生改变时就会触发；change事件：输入框内容发生改变，并且输入框失去焦点时触发</p><br><h3 id="_5-3-附加属性" tabindex="-1">5.3 附加属性 <a class="header-anchor" href="#_5-3-附加属性" aria-label="Permalink to &quot;5.3 附加属性&quot;">​</a></h3><p>除了input公共方法，</p><h4 id="_5-3-1-accept属性" tabindex="-1">5.3.1 accept属性 <a class="header-anchor" href="#_5-3-1-accept属性" aria-label="Permalink to &quot;5.3.1 accept属性&quot;">​</a></h4><p>accept属性是一个字符串，它定义了文件 input 应该接受的文件类型。这个字符串是一个以逗号为分隔的唯一文件类型说明符列表（见下面）。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><em>PS:唯一文件类型说明符列表</em></p><ul><li>一个以英文句号（“.”）开头的合法的不区分大小写的文件名扩展名。例如：.jpg、.pdf 或 .doc。</li><li>一个不带扩展名的 MIME 类型字符串。</li><li>字符串 audio/*，表示“任何音频文件”。</li><li>字符串 video/*，表示“任何视频文件”。</li><li>字符串 image/*，表示“任何图片文件”。</li></ul><p>accept 属性的值是包含一个或多个（用逗号分隔）唯一文件类型说明符的字符串。例如，一个文件选择器需要能被表示成一张图片的内容，包括标准的图片格式和 PDF 文件，大概是这样的：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/*,.pdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_5-3-2-capture属性" tabindex="-1">5.3.2 capture属性 <a class="header-anchor" href="#_5-3-2-capture属性" aria-label="Permalink to &quot;5.3.2 capture属性&quot;">​</a></h4><p>capture 属性是一个字符串，如果 accept (en-US) 属性指出了 input 是图片或者视频类型，则它指定了使用哪个摄像头去获取这些数据。不作展开</p><br><h4 id="_5-3-3-multiple属性" tabindex="-1">5.3.3 multiple属性 <a class="header-anchor" href="#_5-3-3-multiple属性" aria-label="Permalink to &quot;5.3.3 multiple属性&quot;">​</a></h4><p>multiple属性开启后允许用户选择多个文件</p><br><h4 id="_5-3-4-idl-属性-files-和-value" tabindex="-1">5.3.4 IDL 属性（files 和 value） <a class="header-anchor" href="#_5-3-4-idl-属性-files-和-value" aria-label="Permalink to &quot;5.3.4 IDL 属性（files 和 value）&quot;">​</a></h4><ol><li><p>files 被选择的文件以 HTMLInputElement.files 属性返回，它是包含一系列 File 对象的 FileList 对象。FileList是一个类数组对象，每个成员都是一个 File 实例。包含</p><blockquote><p>所有现代浏览器中读写 HTMLInputElement.files 的值，不存在兼容性问题。</p></blockquote><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>文件名。</td></tr><tr><td>lastModified</td><td>一个数字，指定文件最后一次修改的日期和时间，以Unix时间戳表示。</td></tr><tr><td>lastModifiedDate 已弃用</td><td>一个 Date 对象，表示文件最后一次修改的日期和时间。这被弃用，并且不应使用。使用 lastModified 作为替代。但是目前仍能访问</td></tr><tr><td>size</td><td>以字节数为单位的文件大小。</td></tr><tr><td>type</td><td>文件的 MIME 类型。</td></tr><tr><td>webkitRelativePath 非标准</td><td>一个字符串，指定了相对于在目录选择器中选择的基本目录的文件路径（即，一个设置了 webkitdirectory 属性的 file 选择器）。这是非标准的，应该谨慎使用。</td></tr></tbody></table></li><li><p>value 同上面的 “值”</p></li></ol><hr><br><br><h2 id="_6-filereader-对象" tabindex="-1">6 FileReader 对象 <a class="header-anchor" href="#_6-filereader-对象" aria-label="Permalink to &quot;6 FileReader 对象&quot;">​</a></h2><blockquote><p>FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</p></blockquote><h3 id="_6-1-属性" tabindex="-1">6.1 属性 <a class="header-anchor" href="#_6-1-属性" aria-label="Permalink to &quot;6.1 属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>是否只读</th><th>描述</th></tr></thead><tbody><tr><td><code>FileReader.error</code></td><td>只读</td><td>一个DOMException，表示在读取文件时发生的错误。</td></tr><tr><td><code>FileReader.readyState</code></td><td>只读</td><td>表示FileReader状态的数字，EMPTY 0 还没有加载任何数据。LOADING 1 数据正在被加载。DONE 2 已完成全部的读取请求。</td></tr><tr><td><code>FileReader.result</code></td><td>只读</td><td>文件的内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。</td></tr></tbody></table><br><h3 id="_6-2-事件" tabindex="-1">6.2 事件 <a class="header-anchor" href="#_6-2-事件" aria-label="Permalink to &quot;6.2 事件&quot;">​</a></h3><blockquote><p>备注： 因为 FileReader 继承自EventTarget，所以所有这些事件也可以通过addEventListener方法使用。</p></blockquote><table tabindex="0"><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>FileReader.onabort</code></td><td>处理abort事件。该事件在读取操作被中断时触发。</td></tr><tr><td><code>FileReader.onerror</code> (en-US)</td><td>处理error事件。该事件在读取操作发生错误时触发。</td></tr><tr><td><code>FileReader.onload</code></td><td>处理load事件。该事件在读取操作完成时触发。</td></tr><tr><td><code>FileReader.onloadstart</code></td><td>处理loadstart事件。该事件在读取操作开始时触发。</td></tr><tr><td><code>FileReader.onloadend</code></td><td>处理loadend事件。该事件在读取操作结束时（要么成功，要么失败）触发。</td></tr><tr><td><code>FileReader.onprogress</code></td><td>处理progress事件。该事件在读取Blob时触发。</td></tr></tbody></table><br><h3 id="_6-3-方法" tabindex="-1">6.3 方法 <a class="header-anchor" href="#_6-3-方法" aria-label="Permalink to &quot;6.3 方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>FileReader.abort()</code></td><td>中止读取操作。在返回时，readyState属性为DONE。</td></tr><tr><td><code>FileReader.readAsArrayBuffer()</code></td><td>开始读取指定的 Blob中的内容，一旦完成，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象。</td></tr><tr><td><code>FileReader.readAsBinaryString()</code> 非标准</td><td>开始读取指定的Blob中的内容。一旦完成，result属性中将包含所读取文件的原始二进制数据。</td></tr><tr><td><code>FileReader.readAsDataURL()</code></td><td>开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL 格式的 Base64 字符串以表示所读取文件的内容。对于图片文件，这个字符串可以用于<img>元素的 src 属性。注意，这个字符串不能直接进行 Base64 解码，必须把前缀 data:<em>/</em>;base64 ,从字符串里删除以后，再进行解码。</td></tr><tr><td><code>FileReader.readAsText()</code></td><td>开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个字符串以表示所读取的文件内容。该方法的第一个参数是代表文件的 Blob 实例，第二个参数是可选的，表示文本编码，默认为 UTF-8。</td></tr></tbody></table><hr><br><br><h2 id="_7-url-createobjecturl" tabindex="-1">7 URL.createObjectURL() <a class="header-anchor" href="#_7-url-createobjecturl" aria-label="Permalink to &quot;7 URL.createObjectURL()&quot;">​</a></h2><blockquote><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的 URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的 URL 对象表示指定的 File 对象或 Blob 对象。</p></blockquote><p>示例</p><p><code>objectURL = URL.createObjectURL(object);</code></p><p>object为用于创建 URL 的 File 对象、Blob 对象或者 MediaSource 对象。</p><p>返回一个DOMString包含了一个对象 URL，该 URL 可用于指定源 object的内容。</p><p><strong>内存管理：在每次调用 createObjectURL() 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 URL.revokeObjectURL() 方法来释放。虽然浏览器也会自动释放，但是手动释放掉以获得最佳性能和内存使用状况</strong></p><hr><br><br><h2 id="_8-base64" tabindex="-1">8 Base64 <a class="header-anchor" href="#_8-base64" aria-label="Permalink to &quot;8 Base64&quot;">​</a></h2><blockquote><p>Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。可以将图片转成base64，可以减少 HTTP 请求也可以将字符串进行解码和编码。</p></blockquote><table tabindex="0"><thead><tr><th>相关api</th><th>描述</th></tr></thead><tbody><tr><td><code>atob()</code></td><td>解码，解码一个 Base64 字符串；</td></tr><tr><td><code>btoa()</code></td><td>编码，从一个字符串或者二进制数据编码一个 Base64 字符串。</td></tr></tbody></table><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">btoa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编码,得到&#39;SGVsbG8sIHdvcmxk&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">atob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedData); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解码,得到&#39;Hello, world&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><br><h2 id="_9-dataurl" tabindex="-1">9 DataURL <a class="header-anchor" href="#_9-dataurl" aria-label="Permalink to &quot;9 DataURL&quot;">​</a></h2><blockquote><p>Data URL，即前缀为 data: 协议的 URL，其允许内容创建者向文档中嵌入小文件。它们之前被称作“data URI”，直到这个名字被 WHATWG 弃用。</p></blockquote><h3 id="_9-1-语法" tabindex="-1">9.1 语法 <a class="header-anchor" href="#_9-1-语法" aria-label="Permalink to &quot;9.1 语法&quot;">​</a></h3><p>Data URL 由四个部分组成：前缀（data:）、指示数据类型的 MIME 类型、如果非文本则为可选的 base64 标记、数据本身：</p><p>如果数据是文本类型，你可以直接将文本嵌入（根据文档类型，使用合适的实体字符或转义字符）。否则，你可以指定 base64 来嵌入 base64 编码的二进制数据。你可以在这里和这里找到更多关于 MIME 类型的信息。</p><p><code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></p><br><h3 id="_9-2-示例" tabindex="-1">9.2 示例 <a class="header-anchor" href="#_9-2-示例" aria-label="Permalink to &quot;9.2 示例&quot;">​</a></h3><ol><li><p><code>data:,Hello%2C%20World!</code> 简单的 text/plain 类型数据。注意逗号如何百分号编码为 %2C，空格字符如何编码为 %20。</p></li><li><p><code>data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</code> 上一条示例的 base64 编码版本</p></li><li><p><code>data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</code> 一个 HTML 文档源代码 <code>&lt;h1&gt;Hello, World&lt;/h1&gt;</code></p></li><li><p><code>data:text/html,%3Cscript%3Ealert%28%27hi%27%29%3B%3C%2Fscript%3E</code> 带有<code> &lt;script&gt;alert(&#39;hi&#39;);&lt;/script&gt;</code> 的 HTML 文档，用于执行 JavaScript 警告。注意，需要闭合的 script 标签。</p></li></ol><br><h3 id="_9-3-给数据作-base64-编码" tabindex="-1">9.3 给数据作 base64 编码 <a class="header-anchor" href="#_9-3-给数据作-base64-编码" aria-label="Permalink to &quot;9.3 给数据作 base64 编码&quot;">​</a></h3><p>Base64 是一组二进制到文本的编码方案，通过将其转换为 radix-64 表示形式，以 ASCII 字符串格式表示二进制数据。通过仅由 ASCII 字符组成，base64 字符串通常是 url 安全的，这就是为什么它们可用于在 Data URL 中编码数据。</p><hr><br><h2 id="_10-不同格式之间互相转换" tabindex="-1">10 不同格式之间互相转换 <a class="header-anchor" href="#_10-不同格式之间互相转换" aria-label="Permalink to &quot;10 不同格式之间互相转换&quot;">​</a></h2><h3 id="_10-1-file对象转base64" tabindex="-1">10.1 File对象转Base64： <a class="header-anchor" href="#_10-1-file对象转base64" aria-label="Permalink to &quot;10.1 File对象转Base64：&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.target.files;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsDataURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_10-2-arraybuffer转blob" tabindex="-1">10.2 ArrayBuffer转blob <a class="header-anchor" href="#_10-2-arraybuffer转blob" aria-label="Permalink to &quot;10.2 ArrayBuffer转blob&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer, byteOffset, length)]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_10-3-arraybuffer转base64" tabindex="-1">10.3 ArrayBuffer转base64 <a class="header-anchor" href="#_10-3-arraybuffer转base64" aria-label="Permalink to &quot;10.3 ArrayBuffer转base64&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> btoa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.fromCharCode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayBuffer)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_10-4-base64转blob" tabindex="-1">10.4 base64转blob <a class="header-anchor" href="#_10-4-base64转blob" aria-label="Permalink to &quot;10.4 base64转blob&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64toBlob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">base64Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sliceSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> byteCharacters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base64Data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> byteArrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteCharacters.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sliceSize) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> slice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteCharacters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(offset, offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sliceSize);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> byteNumbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slice.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slice.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      byteNumbers[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> byteArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteNumbers);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    byteArrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteArray);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteArrays, { type: contentType });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blob;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_10-5-blob转arraybuffer" tabindex="-1">10.5 blob转ArrayBuffer <a class="header-anchor" href="#_10-5-blob转arraybuffer" aria-label="Permalink to &quot;10.5 blob转ArrayBuffer&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> blobToArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reader.result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reject;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_10-6-blob转base64" tabindex="-1">10.6 blob转base64 <a class="header-anchor" href="#_10-6-blob转base64" aria-label="Permalink to &quot;10.6 blob转base64&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> blobToBase64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onloadend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reader.result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsDataURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_10-7-blob转object-url" tabindex="-1">10.7 blob转Object URL <a class="header-anchor" href="#_10-7-blob转object-url" aria-label="Permalink to &quot;10.7 blob转Object URL&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objectUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObjectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_10-8-blob转成text文本" tabindex="-1">10.8 blob转成text文本 <a class="header-anchor" href="#_10-8-blob转成text文本" aria-label="Permalink to &quot;10.8 blob转成text文本&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_10-9-buffer转json" tabindex="-1">10.9 Buffer转JSON <a class="header-anchor" href="#_10-9-buffer转json" aria-label="Permalink to &quot;10.9 Buffer转JSON&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufferDatas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woshibufferwenjian&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bufferDatas);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bufferDatas, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_10-10-json转buffer" tabindex="-1">10.10 JSON转Buffer <a class="header-anchor" href="#_10-10-json转buffer" aria-label="Permalink to &quot;10.10 JSON转Buffer&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufferFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json).data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bufferFile);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_10-11-buffer转utf-8字符串" tabindex="-1">10.11 Buffer转UTF-8字符串 <a class="header-anchor" href="#_10-11-buffer转utf-8字符串" aria-label="Permalink to &quot;10.11 Buffer转UTF-8字符串&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bufferFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,147)]))}const c=a(n,[["render",l]]);export{b as __pageData,c as default};
