import{_ as d,c as e,o as r,a7 as a}from"./chunks/framework.Dtft01Yp.js";const m=JSON.parse('{"title":"js 数学计算精度库 比较","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/core/javascript/library/big.md","filePath":"frontend/core/javascript/library/big.md","lastUpdated":1751966758000}'),i={name:"frontend/core/javascript/library/big.md"};function o(n,t,s,c,l,p){return r(),e("div",null,t[0]||(t[0]=[a('<h1 id="js-数学计算精度库-比较" tabindex="-1">js 数学计算精度库 比较 <a class="header-anchor" href="#js-数学计算精度库-比较" aria-label="Permalink to &quot;js 数学计算精度库 比较&quot;">​</a></h1><p>统计时间取自 2024/10/12</p><p>以下三个库均由mikemcl 大神/团队提供，所以不存在好坏，需求区别使用场景。</p><table tabindex="0"><thead><tr><th>库名/特点</th><th>big.js</th><th>bignumber.js</th><th>decimal.js</th></tr></thead><tbody><tr><td>npm周下载量</td><td>16,625,952</td><td>10,686,819</td><td>15,641,683</td></tr><tr><td>库大小（未打包）</td><td>58.7 kb</td><td>351 kb</td><td>283 kb</td></tr><tr><td>近期是否更新</td><td>一个月</td><td>一年内</td><td>两年内</td></tr><tr><td>基数值存储</td><td>最小</td><td>大</td><td>大</td></tr><tr><td>基数值</td><td>不适用于其他基数的数字</td><td>十六进制的前缀，例如&#39;0x&#39;</td><td>处理二进制指数表示法中的二进制、八进制和十六进制值，例如 C 编程语言中的值</td></tr><tr><td>Number 类型方法</td><td>toExponential 、 toFixed和toPrecision</td><td>toExponential 、 toFixed和toPrecision</td><td>toExponential 、 toFixed和toPrecision</td></tr><tr><td>功能</td><td>它不接受NaN或Infinity作为合法值，并且运行时配置选项仅限于设置涉及除法的运算的小数位数和舍入模式，以及指数值其中toString产生指数表示法</td><td>多基数值，支持NaN；Infinity。功能、配置不如decimal.js</td><td>多基数值。支持NaN；Infinity。 decimal.js还支持非整数幂并添加了三角函数以及exp 、 ln和log方法。这些添加使得decimal.js明显大于bignumber.js。精度是根据Decimal.js中的有效数字而不是小数位来指定的，并且所有计算都四舍五入到该精度（类似于 Python 的十进制模块），而不仅仅是涉及除法的计算。</td></tr><tr><td>使用场景推荐</td><td>简单的精度要求</td><td>更适合金融应用程序，因为除非使用涉及除法的运算，否则用户不需要担心失去精度</td><td>更适合更科学的应用程序，因为它可以更有效地处理非常小或很大的值。</td></tr></tbody></table>',4)]))}const _=d(i,[["render",o]]);export{m as __pageData,_ as default};
