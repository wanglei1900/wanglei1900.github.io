import{_ as a,c as t,o as i,a7 as n}from"./chunks/framework.Dtft01Yp.js";const E=JSON.parse('{"title":"String","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/core/javascript/base/string.md","filePath":"frontend/core/javascript/base/string.md","lastUpdated":1751966758000}'),e={name:"frontend/core/javascript/base/string.md"};function l(r,s,h,p,d,k){return i(),t("div",null,s[0]||(s[0]=[n(`<h1 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h1><blockquote><p>String是对应字符串的引用类型</p></blockquote><h2 id="_1-javascript-字符" tabindex="-1">1. JavaScript 字符 <a class="header-anchor" href="#_1-javascript-字符" aria-label="Permalink to &quot;1. JavaScript 字符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.length</td><td>字符串长度</td></tr><tr><td>String.charAt</td><td>返回给定索引位置的16位码元，参数传整数</td></tr><tr><td>String.charCodeAt</td><td>返回给定索引的字符编码</td></tr><tr><td>String.fromCharCode</td><td>接受多个字符编码拼接成字符串(以上方法均基于16位码元完成，超过16位码元需要用增补平面，每个字符使用两个16位码元被称为代理对)</td></tr><tr><td>String.codePointAt</td><td>指定码元位置识别完整的码点(用来识别既含单码元又包含代理对的)</td></tr><tr><td>String.fromCodePoint</td><td>接受多个码点拼接成字符串</td></tr></tbody></table><h2 id="_2-字符串操作方法" tabindex="-1">2. 字符串操作方法 <a class="header-anchor" href="#_2-字符串操作方法" aria-label="Permalink to &quot;2. 字符串操作方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.concat</td><td>连接字符串，不推荐，推荐使用 +</td></tr><tr><td>String.slice</td><td>截取字符串，非破坏，第一个参数表示字符串开始，第二个参数表示字符串结束(包含)，省略第二个参数代表提取到字符串结束。</td></tr><tr><td>String.substr</td><td>截取字符串，非破坏，第一个参数表示字符串开始，第二个参数表示字符串结束(包含)，省略第二个参数代表提取到字符串结束。</td></tr><tr><td>String.substring</td><td>截取字符串，非破坏，第一个参数表示字符串开始，第二个参数表示返回字符串的数量， 省略第二个参数代表提取到字符串结束</td></tr></tbody></table><h2 id="_3-字符串位置方法" tabindex="-1">3. 字符串位置方法 <a class="header-anchor" href="#_3-字符串位置方法" aria-label="Permalink to &quot;3. 字符串位置方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.indexOf</td><td>正向查找传入的字符串，并返回位置。 第二个参数开始搜索的位置。</td></tr><tr><td>String.lastIndexOf</td><td>正向查找传入的字符串，并返回位置。第二个参数开始搜索的位置。</td></tr></tbody></table><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找字符串中所有“e”并拼成数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Lorem ipsum dolor sit amet consectetur adipisicing elit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  position.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pos);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [3, 24, 32, 35, 52]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_4-字符串包含方法" tabindex="-1">4. 字符串包含方法 <a class="header-anchor" href="#_4-字符串包含方法" aria-label="Permalink to &quot;4. 字符串包含方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.startsWith</td><td>从字符串中搜索传入的字符串，返回布尔值。搜索字符串开头。第二个参数表示开始搜索的位置</td></tr><tr><td>String.endsWith</td><td>从字符串中搜索传入的字符串，返回布尔值。搜索字符串末尾</td></tr><tr><td>String.includes</td><td>从字符串中搜索传入的字符串，返回布尔值。搜索整个字符串。第二个参数表示开始搜索的位置</td></tr></tbody></table><h2 id="_5-trim-方法" tabindex="-1">5. trim() 方法 <a class="header-anchor" href="#_5-trim-方法" aria-label="Permalink to &quot;5. trim() 方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.trim</td><td>创建字符串副本，删除前后空格符并返回结果。</td></tr><tr><td>String.trimLeft</td><td>字符串开始清理空格符</td></tr><tr><td>String.trimRight</td><td>字符串末尾清理空格符</td></tr></tbody></table><h2 id="_6-repeat-方法" tabindex="-1">6. repeat() 方法 <a class="header-anchor" href="#_6-repeat-方法" aria-label="Permalink to &quot;6. repeat() 方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.repeat</td><td>复制字符串，整数参数代表复制多少次，并返回拼接后的结果</td></tr></tbody></table><h2 id="_7-padstart-和-padend-方法" tabindex="-1">7. padStart() 和 padEnd() 方法 <a class="header-anchor" href="#_7-padstart-和-padend-方法" aria-label="Permalink to &quot;7. padStart() 和 padEnd() 方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.padStart</td><td>小于指定长度，在字符串开始填充字符串。第一个参数为填充的长度，第二个参数为填充的内容。</td></tr><tr><td>String.padEnd</td><td>小于指定长度，在字符串末尾填充字符串。第一个参数为填充的长度，第二个参数为填充的内容。</td></tr></tbody></table><h2 id="_8-字符串的迭代余结构" tabindex="-1">8. 字符串的迭代余结构 <a class="header-anchor" href="#_8-字符串的迭代余结构" aria-label="Permalink to &quot;8. 字符串的迭代余结构&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 手动使用迭代器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strIterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message[Symbol.iterator]();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strIterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value:&quot;a&quot;,done:false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strIterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value:&quot;b&quot;,done:false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strIterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value:&quot;c&quot;,done:false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strIterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value:undefiend,done:true}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用for of 迭代</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcde&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依次打印 a,b,c,d,e</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字符春解构分割成数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcde&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_9-字符串大小写转换" tabindex="-1">9. 字符串大小写转换 <a class="header-anchor" href="#_9-字符串大小写转换" aria-label="Permalink to &quot;9. 字符串大小写转换&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.toLowerCase</td><td>创建字符串副本，将字符串转换为小写并返回结果。</td></tr><tr><td>String.toUpperCase</td><td>创建字符串副本，将字符串转换为大写并返回结果。</td></tr><tr><td>String.toLocaleLowerCase</td><td>创建字符串副本，将字符串转换为大写并返回结果。(特定区域)</td></tr><tr><td>String.toLocaleUpperCase</td><td>创建字符串副本，将字符串转换为大写并返回结果。(特定区域)</td></tr></tbody></table><h2 id="_10-字符串模式pattern" tabindex="-1">10. 字符串模式pattern <a class="header-anchor" href="#_10-字符串模式pattern" aria-label="Permalink to &quot;10. 字符串模式pattern&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.match</td><td>匹配字符串，返回匹配结果。接受一个参数可以是正则字符串或RegExp对象。只会找到第一个匹配项，返回数组。</td></tr><tr><td>String.matchAll</td><td>匹配字符串，返回匹配结果。找到所有返回并一次返回所有结果</td></tr><tr><td>String.search</td><td>从前向后匹配字符串，返回第一个匹配的索引。没找到返回-1</td></tr><tr><td>String.replace</td><td>替换字符串，返回替换后的字符串。第一个参数是字符串只替换一次，如果是正则带全局标记则替换所有，第二个参数是待替换的文本，可以是字符串或函数</td></tr><tr><td>String.replaceAll</td><td></td></tr><tr><td>String.split</td><td>字符串分割，根据传入的分隔符拆分成数组。第一个参数分隔符可以是字符串也可以是RegExp对象，第二参数是数组大小，确保返回的数组不会超过制定 的大小</td></tr></tbody></table><h2 id="_11-localcompare-方法" tabindex="-1">11. localcompare() 方法 <a class="header-anchor" href="#_11-localcompare-方法" aria-label="Permalink to &quot;11. localcompare() 方法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>api</th><th>说明</th></tr></thead><tbody><tr><td>String.localeCompare</td><td>字符串比较，返回一个整数，返回1，0，-1表示两个字符串的相对顺序。</td></tr></tbody></table>`,25)]))}const g=a(e,[["render",l]]);export{E as __pageData,g as default};
