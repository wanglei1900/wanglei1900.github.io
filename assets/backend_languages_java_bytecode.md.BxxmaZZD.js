import{_ as i,c as a,o as n,a7 as t}from"./chunks/framework.Dtft01Yp.js";const g=JSON.parse('{"title":"Java字节码增强技术详解","description":"","frontmatter":{},"headers":[],"relativePath":"backend/languages/java/bytecode.md","filePath":"backend/languages/java/bytecode.md","lastUpdated":1752569659000}'),l={name:"backend/languages/java/bytecode.md"};function e(h,s,p,r,k,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="java字节码增强技术详解" tabindex="-1">Java字节码增强技术详解 <a class="header-anchor" href="#java字节码增强技术详解" aria-label="Permalink to &quot;Java字节码增强技术详解&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#java字节码增强技术详解">Java字节码增强技术详解</a><ul><li><a href="#目录">目录</a></li><li><a href="#一字节码基础">一、字节码基础</a><ul><li><a href="#11-字节码定义与特点">1.1 字节码定义与特点</a></li><li><a href="#12-字节码文件结构">1.2 字节码文件结构</a></li><li><a href="#13-查看字节码工具">1.3 查看字节码工具</a></li></ul></li><li><a href="#二字节码增强技术概览">二、字节码增强技术概览</a><ul><li><a href="#21-核心概念">2.1 核心概念</a></li><li><a href="#22-应用场景">2.2 应用场景</a></li><li><a href="#23-实现原理">2.3 实现原理</a></li></ul></li><li><a href="#三字节码操作框架比较">三、字节码操作框架比较</a><ul><li><a href="#31-主流框架对比">3.1 主流框架对比</a></li><li><a href="#32-框架选型建议">3.2 框架选型建议</a></li></ul></li><li><a href="#四字节码增强实现方式">四、字节码增强实现方式</a><ul><li><a href="#41-类加载时增强">4.1 类加载时增强</a></li><li><a href="#42-运行时增强java-agent">4.2 运行时增强（Java Agent）</a></li></ul></li><li><a href="#五asm实战示例">五、ASM实战示例</a><ul><li><a href="#51-环境配置">5.1 环境配置</a></li><li><a href="#52-方法拦截实现">5.2 方法拦截实现</a></li><li><a href="#53-增强效果验证">5.3 增强效果验证</a></li></ul></li><li><a href="#六高级应用场景">六、高级应用场景</a></li><li><a href="#七总结与最佳实践">七、总结与最佳实践</a><ul><li><a href="#71-技术选型建议">7.1 技术选型建议</a></li><li><a href="#72-性能优化策略">7.2 性能优化策略</a></li><li><a href="#73-避坑指南">7.3 避坑指南</a></li></ul></li></ul></li></ul><h2 id="一、字节码基础" tabindex="-1">一、字节码基础 <a class="header-anchor" href="#一、字节码基础" aria-label="Permalink to &quot;一、字节码基础&quot;">​</a></h2><h3 id="_1-1-字节码定义与特点" tabindex="-1">1.1 字节码定义与特点 <a class="header-anchor" href="#_1-1-字节码定义与特点" aria-label="Permalink to &quot;1.1 字节码定义与特点&quot;">​</a></h3><p>字节码是一种<strong>中间状态的二进制格式</strong>，由Java源码编译(<code>javac</code>)生成，扩展名为<code>.class</code>。它的核心特点包括：</p><ul><li><strong>平台中立性</strong>：一次编译，到处运行（Write Once, Run Anywhere）</li><li><strong>JVM依赖性</strong>：CPU不能直接执行字节码，需由JVM<strong>即时编译(JIT)</strong> 为机器码</li><li><strong>结构紧凑</strong>：相比源代码，字节码文件更小且包含足够的执行信息</li><li><strong>可读性较低</strong>：十六进制格式，但可通过反编译工具转换为<strong>助记符(OpCode)</strong></li></ul><p>Java使用字节码的关键优势在于<strong>解耦了编程语言与底层硬件</strong>，使开发者无需关注平台差异。</p><h3 id="_1-2-字节码文件结构" tabindex="-1">1.2 字节码文件结构 <a class="header-anchor" href="#_1-2-字节码文件结构" aria-label="Permalink to &quot;1.2 字节码文件结构&quot;">​</a></h3><p>.class文件按严格顺序包含10个部分：</p><table tabindex="0"><thead><tr><th><strong>部分</strong></th><th><strong>大小</strong></th><th><strong>说明</strong></th><th><strong>示例值</strong></th></tr></thead><tbody><tr><td>魔数</td><td>4字节</td><td>标识.class文件</td><td><code>0xCAFEBABE</code></td></tr><tr><td>版本号</td><td>4字节</td><td>次版本+主版本</td><td><code>00 00 00 34</code>(Java 8)</td></tr><tr><td>常量池</td><td>变长</td><td>字面量与符号引用</td><td>方法名、类名等</td></tr><tr><td>访问标志</td><td>2字节</td><td>类/接口访问修饰符</td><td><code>ACC_PUBLIC</code></td></tr><tr><td>类索引</td><td>2字节</td><td>当前类全限定名</td><td>常量池索引</td></tr><tr><td>父类索引</td><td>2字节</td><td>父类全限定名</td><td>常量池索引</td></tr><tr><td>接口索引</td><td>变长</td><td>实现接口列表</td><td>常量池索引集合</td></tr><tr><td>字段表</td><td>变长</td><td>类/实例变量信息</td><td>字段名称、类型</td></tr><tr><td>方法表</td><td>变长</td><td>方法详细信息</td><td>方法代码(Code属性)</td></tr><tr><td>附加属性</td><td>变长</td><td>额外元信息</td><td>源文件名称等</td></tr></tbody></table><p><strong>关键区域说明</strong>：</p><ul><li><strong>常量池</strong>：包含字符串常量、类/方法引用等符号信息</li><li><strong>Code属性</strong>：存储JVM指令集（操作码），是<strong>字节码增强的主要操作区域</strong></li><li><strong>LineNumberTable</strong>：源码行号与字节码指令映射，用于调试</li><li><strong>LocalVariableTable</strong>：方法局部变量信息，包含<code>this</code>引用</li></ul><h3 id="_1-3-查看字节码工具" tabindex="-1">1.3 查看字节码工具 <a class="header-anchor" href="#_1-3-查看字节码工具" aria-label="Permalink to &quot;1.3 查看字节码工具&quot;">​</a></h3><ul><li><strong>javap</strong>：JDK自带反编译工具<div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ClassName</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>jclasslib</strong>：IDEA插件，图形化展示字节码结构</li><li><strong>Bytecode Viewer</strong>：独立工具，支持多种反编译器</li></ul><h2 id="二、字节码增强技术概览" tabindex="-1">二、字节码增强技术概览 <a class="header-anchor" href="#二、字节码增强技术概览" aria-label="Permalink to &quot;二、字节码增强技术概览&quot;">​</a></h2><h3 id="_2-1-核心概念" tabindex="-1">2.1 核心概念 <a class="header-anchor" href="#_2-1-核心概念" aria-label="Permalink to &quot;2.1 核心概念&quot;">​</a></h3><p>字节码增强指<strong>在编译后或运行时修改.class文件</strong>，添加新功能或改变行为的技术。其核心价值在于：</p><ul><li><strong>无侵入性</strong>：不修改源码即可增强功能</li><li><strong>动态性</strong>：运行时按需修改类行为</li><li><strong>灵活性</strong>：实现源码层面无法完成的操作</li></ul><h3 id="_2-2-应用场景" tabindex="-1">2.2 应用场景 <a class="header-anchor" href="#_2-2-应用场景" aria-label="Permalink to &quot;2.2 应用场景&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><strong>典型案例</strong></th><th><strong>实现效果</strong></th></tr></thead><tbody><tr><td>动态代理</td><td>Spring AOP</td><td>方法拦截与增强</td></tr><tr><td>性能监控</td><td>APM系统</td><td>方法耗时统计</td></tr><tr><td>热部署</td><td>JRebel</td><td>类替换无需重启</td></tr><tr><td>调用链追踪</td><td>SkyWalking</td><td>分布式链路跟踪</td></tr><tr><td>日志注入</td><td>Log4j2</td><td>上下文信息增强</td></tr><tr><td>测试覆盖</td><td>JaCoCo</td><td>代码覆盖率统计</td></tr><tr><td>安全检查</td><td>RASP</td><td>运行时漏洞防护</td></tr></tbody></table><h3 id="_2-3-实现原理" tabindex="-1">2.3 实现原理 <a class="header-anchor" href="#_2-3-实现原理" aria-label="Permalink to &quot;2.3 实现原理&quot;">​</a></h3><p>字节码增强分为两步：</p><ol><li><strong>修改字节码</strong>：通过框架API操作字节码 <ul><li>添加新方法/字段</li><li>修改现有方法逻辑</li><li>调整类结构</li></ul></li><li><strong>使修改生效</strong>： <ul><li><strong>类加载时</strong>：通过自定义ClassLoader加载修改后的字节码</li><li><strong>运行时</strong>：借助Java Agent的<code>Instrumentation</code> API重定义类</li></ul></li></ol><h2 id="三、字节码操作框架比较" tabindex="-1">三、字节码操作框架比较 <a class="header-anchor" href="#三、字节码操作框架比较" aria-label="Permalink to &quot;三、字节码操作框架比较&quot;">​</a></h2><h3 id="_3-1-主流框架对比" tabindex="-1">3.1 主流框架对比 <a class="header-anchor" href="#_3-1-主流框架对比" aria-label="Permalink to &quot;3.1 主流框架对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>框架</strong></th><th><strong>学习成本</strong></th><th><strong>操作方式</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>典型应用</strong></th></tr></thead><tbody><tr><td>JDK Proxy</td><td>★☆☆☆☆</td><td>接口代理</td><td>简单易用，JDK内置</td><td>仅支持接口</td><td>Spring AOP</td></tr><tr><td>ASM</td><td>★★★★★</td><td>指令级操作</td><td>极致性能，完全控制</td><td>API复杂，需了解JVM指令</td><td>CGLIB, Groovy</td></tr><tr><td>Javassist</td><td>★★☆☆☆</td><td>源码级操作</td><td>编码简单，类Java语法</td><td>不支持泛型等新特性</td><td>FastJSON, MyBatis</td></tr><tr><td>CGLIB</td><td>★★★☆☆</td><td>子类继承</td><td>支持类代理，功能全面</td><td>逐渐被替代</td><td>Spring, Hibernate</td></tr><tr><td>Byte Buddy</td><td>★★★☆☆</td><td>DSL链式API</td><td>功能强大，API友好</td><td>文档较少</td><td>Mockito, SkyWalking</td></tr></tbody></table><p><strong>关键特性分析</strong>：</p><ul><li><strong>ASM</strong>：直接操作JVM指令，性能最优（适合高性能场景）</li><li><strong>Javassist</strong>：使用字符串拼接代码，开发效率高（适合快速原型）</li><li><strong>Byte Buddy</strong>：现代API设计，支持Java新特性（推荐新项目使用）</li></ul><h3 id="_3-2-框架选型建议" tabindex="-1">3.2 框架选型建议 <a class="header-anchor" href="#_3-2-框架选型建议" aria-label="Permalink to &quot;3.2 框架选型建议&quot;">​</a></h3><ol><li><strong>简单代理需求</strong>：优先选JDK Proxy或CGLIB</li><li><strong>高性能场景</strong>：ASM（如框架底层）</li><li><strong>复杂字节码操作</strong>：Byte Buddy（API更友好）</li><li><strong>快速开发</strong>：Javassist（避免手写字节码）</li></ol><h2 id="四、字节码增强实现方式" tabindex="-1">四、字节码增强实现方式 <a class="header-anchor" href="#四、字节码增强实现方式" aria-label="Permalink to &quot;四、字节码增强实现方式&quot;">​</a></h2><h3 id="_4-1-类加载时增强" tabindex="-1">4.1 类加载时增强 <a class="header-anchor" href="#_4-1-类加载时增强" aria-label="Permalink to &quot;4.1 类加载时增强&quot;">​</a></h3><p>通过<strong>自定义ClassLoader</strong>在加载阶段修改字节码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnhanceClassLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] origBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadClassData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] enhancedBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enhanceClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origBytes); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字节码增强</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, enhancedBytes, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, enhancedBytes.length);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>适用场景</strong>：</p><ul><li>需控制类加载过程</li><li>隔离环境（如容器）</li></ul><h3 id="_4-2-运行时增强-java-agent" tabindex="-1">4.2 运行时增强（Java Agent） <a class="header-anchor" href="#_4-2-运行时增强-java-agent" aria-label="Permalink to &quot;4.2 运行时增强（Java Agent）&quot;">​</a></h3><p>使用Java Agent技术，通过<code>premain</code>或<code>agentmain</code>方法注册转换器：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SampleAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> premain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Instrumentation </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inst.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTransformer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassFileTransformer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClassLoader </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">classBeingRedefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    ProtectionDomain </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">protectionDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">classfileBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enhanceClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(classfileBuffer); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回增强后的字节码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>启动参数</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-javaagent:/path/to/agent.jar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>两种模式</strong>：</p><ol><li><strong>静态加载</strong>：JVM启动时通过<code>-javaagent</code>指定（<code>premain</code>）</li><li><strong>动态加载</strong>：运行时通过Attach API注入（<code>agentmain</code>）</li></ol><h2 id="五、asm实战示例" tabindex="-1">五、ASM实战示例 <a class="header-anchor" href="#五、asm实战示例" aria-label="Permalink to &quot;五、ASM实战示例&quot;">​</a></h2><h3 id="_5-1-环境配置" tabindex="-1">5.1 环境配置 <a class="header-anchor" href="#_5-1-环境配置" aria-label="Permalink to &quot;5.1 环境配置&quot;">​</a></h3><p>Maven依赖：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.ow2.asm&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;asm&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;9.6&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>目标类：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SayService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_5-2-方法拦截实现" tabindex="-1">5.2 方法拦截实现 <a class="header-anchor" href="#_5-2-方法拦截实现" aria-label="Permalink to &quot;5.2 方法拦截实现&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.objectweb.asm.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogMethodVisitor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MethodVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogMethodVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MethodVisitor </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Opcodes.ASM9, mv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法开始插入日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFieldInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Opcodes.GETSTATIC, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java/lang/System&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         &quot;Ljava/io/PrintStream;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitLdcInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;&gt; 方法开始执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitMethodInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Opcodes.INVOKEVIRTUAL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java/io/PrintStream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                          &quot;println&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(Ljava/lang/String;)V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> opcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在返回指令前插入日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((opcode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Opcodes.IRETURN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opcode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Opcodes.RETURN) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opcode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Opcodes.ATHROW) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFieldInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Opcodes.GETSTATIC, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java/lang/System&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             &quot;Ljava/io/PrintStream;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitLdcInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;&lt; 方法执行结束&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitMethodInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Opcodes.INVOKEVIRTUAL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java/io/PrintStream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                              &quot;println&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(Ljava/lang/String;)V&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitInsn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opcode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogClassVisitor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogClassVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClassVisitor </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Opcodes.ASM9, cv);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MethodVisitor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exceptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MethodVisitor mv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(access, name, desc, signature, exceptions);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;init&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogMethodVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mv); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包装原始MethodVisitor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mv;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="_5-3-增强效果验证" tabindex="-1">5.3 增强效果验证 <a class="header-anchor" href="#_5-3-增强效果验证" aria-label="Permalink to &quot;5.3 增强效果验证&quot;">​</a></h3><p>原方法调用：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SayService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">say</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello World</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>增强后输出：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt;&gt; 方法开始执行</span></span>
<span class="line"><span>Hello World</span></span>
<span class="line"><span>&lt;&lt; 方法执行结束</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>技术要点</strong>：</p><ol><li><strong>ClassVisitor</strong>：遍历类的结构</li><li><strong>MethodVisitor</strong>：修改方法指令</li><li><strong>visitCode()</strong>：在方法起始位置插入代码</li><li><strong>visitInsn()</strong>：在特定指令（如RETURN）前插入代码</li></ol><h2 id="六、高级应用场景" tabindex="-1">六、高级应用场景 <a class="header-anchor" href="#六、高级应用场景" aria-label="Permalink to &quot;六、高级应用场景&quot;">​</a></h2><ol><li><p><strong>APM（应用性能监控）</strong></p><ul><li>原理：在方法入口/出口插入计时逻辑</li><li>实现：通过Java Agent全局植入</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    originalMethod.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(methodName, cost);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p><strong>动态跟踪调用链</strong></p><ul><li>在每个方法中注入唯一ID</li><li>通过ThreadLocal传递调用上下文</li><li>输出完整调用树及耗时</li></ul></li><li><p><strong>安全检查增强</strong></p><ul><li>SQL注入防护：在JDBC方法中插入参数检查</li><li>XSS防御：在HTTP响应输出时进行过滤</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String safeOutput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HtmlUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">escapeHtml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalOutput);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>Mock测试框架</strong></p><ul><li>动态替换方法实现</li><li>返回预设的模拟数据</li><li>如Mockito、PowerMock等框架</li></ul></li><li><p><strong>智能热修复</strong></p><ul><li>运行时替换有缺陷的类</li><li>避免服务重启</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Instrumentation inst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInstrumentation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inst.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redefineClasses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(targetClass, newBytecode));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h2 id="七、总结与最佳实践" tabindex="-1">七、总结与最佳实践 <a class="header-anchor" href="#七、总结与最佳实践" aria-label="Permalink to &quot;七、总结与最佳实践&quot;">​</a></h2><h3 id="_7-1-技术选型建议" tabindex="-1">7.1 技术选型建议 <a class="header-anchor" href="#_7-1-技术选型建议" aria-label="Permalink to &quot;7.1 技术选型建议&quot;">​</a></h3><ul><li><strong>基础代理需求</strong>：优先选择JDK Proxy或CGLIB</li><li><strong>高性能场景</strong>：使用ASM（如框架底层）</li><li><strong>复杂逻辑</strong>：推荐Byte Buddy（API更现代）</li><li><strong>快速开发</strong>：考虑Javassist（避免字节码操作）</li></ul><h3 id="_7-2-性能优化策略" tabindex="-1">7.2 性能优化策略 <a class="header-anchor" href="#_7-2-性能优化策略" aria-label="Permalink to &quot;7.2 性能优化策略&quot;">​</a></h3><ol><li><strong>缓存增强结果</strong>：避免重复增强相同类</li><li><strong>减少字节码膨胀</strong>：控制注入代码量</li><li><strong>使用局部变量表</strong>：避免不必要的栈操作</li><li><strong>选择轻量级框架</strong>：根据需求权衡功能与性能</li></ol><h3 id="_7-3-避坑指南" tabindex="-1">7.3 避坑指南 <a class="header-anchor" href="#_7-3-避坑指南" aria-label="Permalink to &quot;7.3 避坑指南&quot;">​</a></h3><ul><li><strong>兼容性问题</strong>：确保字节码版本与目标环境一致</li><li><strong>栈帧校验</strong>：修改后需保证<code>StackMapTable</code>正确性（Java 6+）</li><li><strong>避免死循环</strong>：增强代码中不要调用自身方法</li><li><strong>类加载隔离</strong>：注意增强类与业务类的ClassLoader一致性</li></ul><blockquote><p>字节码增强是Java高级开发的<strong>核心技术</strong>，掌握它能深入理解框架原理并实现高阶功能。建议从ASM或Byte Buddy开始实践，结合Java Agent技术逐步深入。</p></blockquote><p><strong>学习资源推荐</strong>：</p><ul><li><a href="https://asm.ow2.io/" target="_blank" rel="noreferrer">ASM官方文档</a></li><li><a href="https://bytebuddy.net/#/tutorial" target="_blank" rel="noreferrer">Byte Buddy教程</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html" target="_blank" rel="noreferrer">Java Instrumentation指南</a></li></ul>`,73)]))}const o=i(l,[["render",e]]);export{g as __pageData,o as default};
