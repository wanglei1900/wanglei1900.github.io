import{_ as a,c as i,o as e,a7 as n}from"./chunks/framework.Dtft01Yp.js";const l="/img/tree-shaking/%E6%A0%91%E6%91%87%E5%89%8D.jpg",p="/img/tree-shaking/%E6%A0%91%E6%91%87%E5%90%8E.jpg",r="/img/tree-shaking/%E6%9F%A5%E7%9C%8Bchunk-vendors.jpg",g=JSON.parse('{"title":"tree shaking 树摇","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/engineering/deploy/tree-shaking.md","filePath":"frontend/engineering/deploy/tree-shaking.md","lastUpdated":1751966758000}'),t={name:"frontend/engineering/deploy/tree-shaking.md"};function h(d,s,k,o,c,b){return e(),i("div",null,s[0]||(s[0]=[n('<h1 id="tree-shaking-树摇" tabindex="-1">tree shaking 树摇 <a class="header-anchor" href="#tree-shaking-树摇" aria-label="Permalink to &quot;tree shaking 树摇&quot;">​</a></h1><blockquote><p>Tree Shaking 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。</p></blockquote><h2 id="_1-前置知识" tabindex="-1">1 前置知识 <a class="header-anchor" href="#_1-前置知识" aria-label="Permalink to &quot;1 前置知识&quot;">​</a></h2><ul><li><p>webpack 打包产物js文件夹下主要分为三个主要模块（css其实也同理）</p><ul><li>打包工具将node_modules 里的三方库压缩合并成一个单独的bundle，位置 js/chunk-vendors.hash.js</li><li>打包工具将自己写的模块代码，位置 js/app.hash.js</li><li>打包工具将路由懒加载的模块分隔，常见的分隔符有xx-xx.hash.js 代表文件名的分隔符，xx~x-xxx.js 代表打包工具将多个模块xx和x-xxx糅合进一起</li></ul></li><li><p>webpack-bundle-analyzer 分析图显示三个模块大小</p><ul><li>stat size 原始模块的大小，即未经任何处理或压缩的模块大小</li><li>parsed size 经过 Webpack 解析和处理后的模块大小</li><li>gzipped size 经过 gzip 压缩后的模块大小</li></ul></li></ul><br><h2 id="_2-配置树摇" tabindex="-1">2 配置树摇 <a class="header-anchor" href="#_2-配置树摇" aria-label="Permalink to &quot;2 配置树摇&quot;">​</a></h2><p><img src="'+l+`" alt="树摇前" loading="lazy"></p><p>这里拿最常见的lodash库来举个例子，老项目使用了lodash 库，改造成 lodash-es 库</p><h3 id="_2-2-脚手架配置-webpack-bundle-analyzer" tabindex="-1">2.2 脚手架配置 webpack-bundle-analyzer <a class="header-anchor" href="#_2-2-脚手架配置-webpack-bundle-analyzer" aria-label="Permalink to &quot;2.2 脚手架配置 webpack-bundle-analyzer&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue-cli 高级版本已经预装，4.0以上</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack-bundle-analyzer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).BundleAnalyzerPlugin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  configureWebpack: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用默认配置，具体配置 在函数参数里对象传入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BundleAnalyzerPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-3-安装lodash-es" tabindex="-1">2.3 安装lodash-es <a class="header-anchor" href="#_2-3-安装lodash-es" aria-label="Permalink to &quot;2.3 安装lodash-es&quot;">​</a></h3><p>我们可以在 <a href="https://npm.devtool.tech/" target="_blank" rel="noreferrer">npm.devtool.tech</a> 中查看某个库是否支持 Tree Shaking。</p><p>支持 ES 则支持webpack树摇</p><p>lodash-es 支持es导入导出</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 舍弃全量引入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import lodash from &#39;lodash&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用支持es的库，并且使用es导入语法支持树摇</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {debounce} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash-es&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-4-重新打包生成" tabindex="-1">2.4 重新打包生成 <a class="header-anchor" href="#_2-4-重新打包生成" aria-label="Permalink to &quot;2.4 重新打包生成&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包测试，会在dist文件夹下生成 report.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --report</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h2 id="_3-分析树摇结果" tabindex="-1">3 分析树摇结果 <a class="header-anchor" href="#_3-分析树摇结果" aria-label="Permalink to &quot;3 分析树摇结果&quot;">​</a></h2><h3 id="_3-1-webpack-bundle-analyzer-查看分析图" tabindex="-1">3.1 webpack-bundle-analyzer 查看分析图 <a class="header-anchor" href="#_3-1-webpack-bundle-analyzer-查看分析图" aria-label="Permalink to &quot;3.1 webpack-bundle-analyzer 查看分析图&quot;">​</a></h3><p><img src="`+p+'" alt="树摇后" loading="lazy"></p><br><p><img src="'+r+'" alt="查看chunk-vendors" loading="lazy"></p><h3 id="_3-2-打包产物大小分析" tabindex="-1">3.2 打包产物大小分析 <a class="header-anchor" href="#_3-2-打包产物大小分析" aria-label="Permalink to &quot;3.2 打包产物大小分析&quot;">​</a></h3><ul><li>lodash 打包产物 <ul><li>stat size： 531.35 KB</li><li>parsed size： 71.48 KB</li><li>gzipped size： 25.2 KB</li></ul></li><li>lodash-es 打包产物 <ul><li>stat size： 102.87 KB</li><li>parsed size： 22.07 KB</li><li>gzipped size： 7.19 KB</li></ul></li></ul><p>lodash打包后产物从 71.48 KB 到 22.07 KB，减少了50 KB 左右。</p><h3 id="_3-3-打包产物是否使用树摇" tabindex="-1">3.3 打包产物是否使用树摇 <a class="header-anchor" href="#_3-3-打包产物是否使用树摇" aria-label="Permalink to &quot;3.3 打包产物是否使用树摇&quot;">​</a></h3><p>虽然 lodash 也会经过 webpack 的静态分析减小打包体积。但是查看分析图很明显是打包成一整个文件。 当我们使用 lodash-es 时，通过 webpack-bundle-analyzer 可以清楚的看到只打包了运用的模块。</p>',28)]))}const m=a(t,[["render",h]]);export{g as __pageData,m as default};
