import{_ as a,c as i,o as n,a7 as e}from"./chunks/framework.Dtft01Yp.js";const E=JSON.parse('{"title":"webworker（简易——需扩展）","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/web/web-worker/base.md","filePath":"frontend/web/web-worker/base.md","lastUpdated":1751016452000}'),l={name:"frontend/web/web-worker/base.md"};function p(t,s,r,h,k,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="webworker-简易——需扩展" tabindex="-1">webworker（简易——需扩展） <a class="header-anchor" href="#webworker-简易——需扩展" aria-label="Permalink to &quot;webworker（简易——需扩展）&quot;">​</a></h1><blockquote><p>javascript是单线程工作，浏览器不会同时运行两个事件处理程序。但是浏览器有个work类可以解除单线程的限制。</p></blockquote><h2 id="一、特性" tabindex="-1">一、特性 <a class="header-anchor" href="#一、特性" aria-label="Permalink to &quot;一、特性&quot;">​</a></h2><h3 id="_1-worker运行于独立的运行环境-有着完全独立的全局对象-无法访问window和document对象。" tabindex="-1">1. Worker运行于独立的运行环境，有着完全独立的全局对象，无法访问window和document对象。 <a class="header-anchor" href="#_1-worker运行于独立的运行环境-有着完全独立的全局对象-无法访问window和document对象。" aria-label="Permalink to &quot;1. Worker运行于独立的运行环境，有着完全独立的全局对象，无法访问window和document对象。&quot;">​</a></h3><h3 id="_2-worker与主线程只能通过异步消息机制通信。-意味着仍不可能并发修改dom-。" tabindex="-1">2. Worker与主线程只能通过异步消息机制通信。（意味着仍不可能并发修改DOM）。 <a class="header-anchor" href="#_2-worker与主线程只能通过异步消息机制通信。-意味着仍不可能并发修改dom-。" aria-label="Permalink to &quot;2. Worker与主线程只能通过异步消息机制通信。（意味着仍不可能并发修改DOM）。&quot;">​</a></h3><h3 id="_3-创建新的工作线程-意味着可以将大量密集或长时间的计算放入worker线程中-如大文件上传的切片和图像处理等。" tabindex="-1">3. 创建新的工作线程，意味着可以将大量密集或长时间的计算放入worker线程中，如大文件上传的切片和图像处理等。 <a class="header-anchor" href="#_3-创建新的工作线程-意味着可以将大量密集或长时间的计算放入worker线程中-如大文件上传的切片和图像处理等。" aria-label="Permalink to &quot;3. 创建新的工作线程，意味着可以将大量密集或长时间的计算放入worker线程中，如大文件上传的切片和图像处理等。&quot;">​</a></h3><h3 id="_4-开辟了新的线程-意味着worker的api也分为两部分-主线程的work对象和新开辟工作线程的workerglobalscope" tabindex="-1">4. 开辟了新的线程，意味着Worker的API也分为两部分，主线程的work对象和新开辟工作线程的WorkerGlobalScope. <a class="header-anchor" href="#_4-开辟了新的线程-意味着worker的api也分为两部分-主线程的work对象和新开辟工作线程的workerglobalscope" aria-label="Permalink to &quot;4. 开辟了新的线程，意味着Worker的API也分为两部分，主线程的work对象和新开辟工作线程的WorkerGlobalScope.&quot;">​</a></h3><h2 id="二、主线程的worker对象" tabindex="-1">二、主线程的worker对象 <a class="header-anchor" href="#二、主线程的worker对象" aria-label="Permalink to &quot;二、主线程的worker对象&quot;">​</a></h2><h3 id="_1-let-worker-new-worker-utils-js" tabindex="-1">1.<code>let worker = new Worker(&quot;utils/***.js&quot;)</code> <a class="header-anchor" href="#_1-let-worker-new-worker-utils-js" aria-label="Permalink to &quot;1.\`let worker = new Worker(&quot;utils/***.js&quot;)\`&quot;">​</a></h3><p>要创建新的工作线程，直接调用Worker构造函数，传入一个URL，这个URL用于指定线程要执行的js代码,如果传入的url相对路径则会去调用文件的相对位置调用，如果传入的绝对url路径必须保持同源策略（协议、主机、端口相同）。</p><h3 id="_2-主线程worker-postmessage-工作线程self-onmessage-function-e" tabindex="-1">2. 主线程<code>worker.postMessage(***)</code>，工作线程<code>self.onmessage=function(e){}</code> <a class="header-anchor" href="#_2-主线程worker-postmessage-工作线程self-onmessage-function-e" aria-label="Permalink to &quot;2. 主线程\`worker.postMessage(***)\`，工作线程\`self.onmessage=function(e){}\`&quot;">​</a></h3><p>主线程postMessage可以向工作线程发送字符串、对象、数组、定型数组、映射、集合，这里postMessage使用了结构化克隆算法，浅显理解为比JSON深拷贝高级。工作线程通过监听message事件（这里使用DOM0和DOM2事件都可以），传递的消息保存在e.data中。</p><h3 id="_3-反之工作线程也可以使用postmessage向主线程传递消息-同上。" tabindex="-1">3.反之工作线程也可以使用postMessage向主线程传递消息，同上。 <a class="header-anchor" href="#_3-反之工作线程也可以使用postmessage向主线程传递消息-同上。" aria-label="Permalink to &quot;3.反之工作线程也可以使用postMessage向主线程传递消息，同上。&quot;">​</a></h3><h3 id="_4-主线程worker-terminate" tabindex="-1">4.主线程<code>worker.terminate()</code> <a class="header-anchor" href="#_4-主线程worker-terminate" aria-label="Permalink to &quot;4.主线程\`worker.terminate()\`&quot;">​</a></h3><p>可以强制停止工作线程</p><h2 id="三、工作线程的全局对象" tabindex="-1">三、工作线程的全局对象 <a class="header-anchor" href="#三、工作线程的全局对象" aria-label="Permalink to &quot;三、工作线程的全局对象&quot;">​</a></h2><p>主线程调用Worker对象时传入的url地址所指向的js代码会与主线程隔离开。全局对象为WorkGlobalScope对象。</p><h3 id="_1-创建worker对象时-第二个参数为name属性" tabindex="-1">1.创建Worker对象时，第二个参数为name属性 <a class="header-anchor" href="#_1-创建worker对象时-第二个参数为name属性" aria-label="Permalink to &quot;1.创建Worker对象时，第二个参数为name属性&quot;">​</a></h3><p>该name的值为该工作线程全局对象的name属性，在console.warn()或console.error()都会包含这个名字。</p><h3 id="_2-工作线程self-close" tabindex="-1">2.工作线程<code>self.close()</code> <a class="header-anchor" href="#_2-工作线程self-close" aria-label="Permalink to &quot;2.工作线程\`self.close()\`&quot;">​</a></h3><p>工作线程调用close和主线程调用terminate一样终止线程。</p><h3 id="_3-工作线程的全局对象引用是self" tabindex="-1">3.工作线程的全局对象引用是self <a class="header-anchor" href="#_3-工作线程的全局对象引用是self" aria-label="Permalink to &quot;3.工作线程的全局对象引用是self&quot;">​</a></h3><p>self拥有js全局对象的所有属性，也拥有window对象的以下属性</p><ul><li><code>setTimeout()</code>、<code>clearTimeout()</code>、<code>setInterval()</code>、<code>clearInterval()</code>等定时器方法</li><li></li><li>self建议使用DOM2事件<code>addEventListener()</code>、<code>removeEventListener()</code></li><li>self也可以在工作线程中另外开启一个工作线程，类似于现实中的分包。</li><li>location属性描述传入的URL，属性都是只读的。navigator属性类似于window对象的，有appName、appVersion、platform、userAgent和online属性</li></ul><h2 id="四、在工作线程中引包。" tabindex="-1">四、在工作线程中引包。 <a class="header-anchor" href="#四、在工作线程中引包。" aria-label="Permalink to &quot;四、在工作线程中引包。&quot;">​</a></h2><p>worker不支持模块系统，但是工作线程有自己的方式。可以传入多个url（js代码文件），按照传入的顺序执行，具有阻塞性。js代码脚本文件也可以使用importScripts。importScripts()是同步函数。只有Chrome中实现模块和import，但是由于兼容性不作介绍。 <code>self.importScripts(&quot;url1&quot;,&quot;url2&quot;)</code></p><h2 id="五、工作线程中执行流程和错误" tabindex="-1">五、工作线程中执行流程和错误 <a class="header-anchor" href="#五、工作线程中执行流程和错误" aria-label="Permalink to &quot;五、工作线程中执行流程和错误&quot;">​</a></h2><p>工作线程自下而上同步的执行自己的代码、脚本模块，之后就进入异步阶段，准备对事件和定时器。只要注册了message事件，如果有可能接受消息，则工作线程不会退出。如果没有注册message事件，则将代码中的异步代码执行完毕，工作线程会自动退出。所以尽量不要显式的调用close结束线程，除非和主线程已经协商一致。 如果工作线程中出现了异常，工作线程全局对象错误未处理，会被传播到主线程worker对象上。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在工作线程处理错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventdefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果工作线程不处理错误，则需要在主线程处理未被捕获的错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="六、postmessage-、messageport和messagechannel" tabindex="-1">六、postMessage()、MessagePort和MessageChannel <a class="header-anchor" href="#六、postmessage-、messageport和messagechannel" aria-label="Permalink to &quot;六、postMessage()、MessagePort和MessageChannel&quot;">​</a></h2><p>MessageChannel是一个对象，有两个属性port1和port2，他们都是MessagePort对象，MessagePort对象有一个postMessage和onmessage事件。在port1的postMessage会触发port2的message事件。这里port2如果使用了DOM2事件，则需要先调用start(),否则会看不看消息。</p><p>其中postMessage第一个参数是消息，第二个参数是数组，会被转移到另一端而非复制（性能）。</p><ul><li>主线程与工作线程之间通信</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;worker.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> urgentChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> urgentPort </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.port1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({command:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toPort2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,value:channel.port2},[channel.port2])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 接受工作线程发过来的紧急消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urgentChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,handleUrgentMessage)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始接受消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urgentChannel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送紧急消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urgentPort.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>工作线程之间直接通信，转移</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./worker1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./worker2.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把 port1 分配给 worker1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [ms.port1]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把 port2 分配给 worker2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [ms.port2]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// worker1.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.ports[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hi! I&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m worker1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;)</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// worker2.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.ports[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>`,37)]))}const c=a(l,[["render",p]]);export{E as __pageData,c as default};
