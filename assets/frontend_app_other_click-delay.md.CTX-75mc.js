import{_ as i,c as s,o as e,a7 as t}from"./chunks/framework.Dtft01Yp.js";const k=JSON.parse('{"title":"移动端Click300毫秒点击延迟产生的原因","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/app/other/click-delay.md","filePath":"frontend/app/other/click-delay.md","lastUpdated":1751966758000}'),n={name:"frontend/app/other/click-delay.md"};function l(c,a,o,r,p,h){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="移动端click300毫秒点击延迟产生的原因" tabindex="-1">移动端Click300毫秒点击延迟产生的原因 <a class="header-anchor" href="#移动端click300毫秒点击延迟产生的原因" aria-label="Permalink to &quot;移动端Click300毫秒点击延迟产生的原因&quot;">​</a></h1><blockquote><p>移动端浏览器的默认显示宽度是980px(不同机型各异，但相差不大)，而不是屏幕的宽度(320px或其他)。为了对早期普通网页更好的体验，iphone设计了双击放大显示的功能–这就是300ms延迟的来源：如果用户一次点击后300ms内没有其他操作，则认为是个单击行为；否则为双击放大行为。</p></blockquote><p>解决办法</p><h2 id="一、meta标签里加上" tabindex="-1">一、meta标签里加上 <a class="header-anchor" href="#一、meta标签里加上" aria-label="Permalink to &quot;一、meta标签里加上&quot;">​</a></h2><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt; </code></p><ol><li>设置不能缩放：user-scalable=no。 不能缩放就不会有双击缩放操作，因此click事件也就没了300ms延迟，这个是Chrome首先在Android中提出的。</li><li>设置显示宽度：width=device-width。Chrome 开发团队不久前宣布，在 Chrome 32 这一版中，他们将在包含 width=device-width 或者置为比 viewport 值更小的页面上禁用双击缩放。当然，没有双击缩放就没有 300毫秒点击延迟。</li><li>IE的指针事件 (Pointer Events)：设置touch-action:none，根据规范，touch-action 属性决定 “是否触摸操作会触发用户代理的默认行为。这包括但不限于双指缩放等行为”。 从实际应用的角度来看，touch-action决定了用户在点击了目标元素之后，是否能够进行双指缩放或者双击缩放。因此，这也相当完美地解决了300 毫秒点击延迟的问题。</li></ol><h2 id="二、vue中使用fastclick插件" tabindex="-1">二、vue中使用fastClick插件 <a class="header-anchor" href="#二、vue中使用fastclick插件" aria-label="Permalink to &quot;二、vue中使用fastClick插件&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">全局引入 main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fastClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fastclick&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">配置一下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fastClick.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,8)]))}const m=i(n,[["render",l]]);export{k as __pageData,m as default};
