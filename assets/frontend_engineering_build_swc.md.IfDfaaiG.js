import{_ as h,C as d,c as k,o as i,a7 as n,b as l,w as a,a as e,G as r,a8 as p}from"./chunks/framework.Dtft01Yp.js";const F=JSON.parse('{"title":"SWC编译器：现代前端构建加速器","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/engineering/build/swc.md","filePath":"frontend/engineering/build/swc.md","lastUpdated":1752498754000}'),o={name:"frontend/engineering/build/swc.md"};function c(E,s,g,b,u,y){const t=d("Mermaid");return i(),k("div",null,[s[2]||(s[2]=n('<h1 id="swc编译器-现代前端构建加速器" tabindex="-1">SWC编译器：现代前端构建加速器 <a class="header-anchor" href="#swc编译器-现代前端构建加速器" aria-label="Permalink to &quot;SWC编译器：现代前端构建加速器&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ol><li><a href="#1-swc核心概念">SWC核心概念</a></li><li><a href="#2-架构设计与性能优势">架构设计与性能优势</a></li><li><a href="#3-核心功能特性">核心功能特性</a></li><li><a href="#4-使用方式与配置">使用方式与配置</a></li><li><a href="#5-与babel的对比">与Babel的对比</a></li><li><a href="#6-实际应用场景">实际应用场景</a></li><li><a href="#7-注意事项与限制">注意事项与限制</a></li><li><a href="#8-学习资源">学习资源</a></li></ol><hr><h2 id="_1-swc核心概念" tabindex="-1">1. SWC核心概念 <a class="header-anchor" href="#_1-swc核心概念" aria-label="Permalink to &quot;1. SWC核心概念&quot;">​</a></h2><p><strong>SWC (Speedy Web Compiler)</strong> 是基于Rust编写的下一代前端编译工具，旨在替代Babel和TSC(TypeScript编译器)的转换功能。它的核心定位是：</p><ul><li><strong>超高速编译器</strong>：在单线程上比Babel快20倍，四核环境下快70倍</li><li><strong>多能力平台</strong>：支持代码编译、打包、压缩和优化</li><li><strong>现代化支持</strong>：原生支持TypeScript、React JSX、ES6+等语法</li><li><strong>生态友好</strong>：被Next.js、Parcel、Deno及Vercel、字节跳动、腾讯等公司采用</li></ul><blockquote><p>SWC的核心目标：通过Rust的高性能优势，解决JavaScript工具链的性能瓶颈问题</p></blockquote><hr><h2 id="_2-架构设计与性能优势" tabindex="-1">2. 架构设计与性能优势 <a class="header-anchor" href="#_2-架构设计与性能优势" aria-label="Permalink to &quot;2. 架构设计与性能优势&quot;">​</a></h2><h3 id="性能对比-swc-vs-babel" tabindex="-1">性能对比（SWC vs Babel） <a class="header-anchor" href="#性能对比-swc-vs-babel" aria-label="Permalink to &quot;性能对比（SWC vs Babel）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>SWC耗时</th><th>Babel耗时</th><th>提升倍数</th></tr></thead><tbody><tr><td>ES6转换ES5</td><td>~8ms</td><td>~400ms</td><td>50x</td></tr><tr><td>JSX转换</td><td>~4ms</td><td>~80ms</td><td>20x</td></tr><tr><td>大型项目构建</td><td>1秒</td><td>7秒</td><td>7x</td></tr></tbody></table><h3 id="高性能原理" tabindex="-1">高性能原理 <a class="header-anchor" href="#高性能原理" aria-label="Permalink to &quot;高性能原理&quot;">​</a></h3>',13)),(i(),l(p,null,{default:a(()=>[r(t,{id:"mermaid-154",class:"mermaid",graph:"graph%20LR%0AA%5B%E6%BA%90%E7%A0%81%E8%BE%93%E5%85%A5%5D%20--%3E%20B%5BRust%E7%BC%96%E5%86%99%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%A0%B8%E5%BF%83%5D%0AB%20--%3E%20C%5B%E5%B9%B6%E8%A1%8CAST%E5%A4%84%E7%90%86%5D%0AC%20--%3E%20D%5B%E5%8D%95%E6%AC%A1%E9%81%8D%E5%8E%86%E4%BC%98%E5%8C%96%5D%0AD%20--%3E%20E%5B%E6%9C%80%E5%B0%8F%E5%8C%96%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C%5D%0AE%20--%3E%20F%5B%E9%AB%98%E6%95%88%E6%9C%BA%E5%99%A8%E7%A0%81%E8%BE%93%E5%87%BA%5D%0AF%20--%3E%20G%5B%E7%BC%96%E8%AF%91%E5%90%8E%E4%BB%A3%E7%A0%81%5D%0A"})]),fallback:a(()=>s[0]||(s[0]=[e(" Loading... ")])),_:1})),s[3]||(s[3]=n(`<ol><li><p><strong>Rust语言优势</strong>：</p><ul><li>编译型语言，直接生成高效机器码</li><li>无垃圾收集(GC)暂停</li><li>内存安全且零成本抽象</li></ul></li><li><p><strong>并发处理模型</strong>：</p><ul><li>充分利用多核CPU并行编译</li><li>异步任务调度优化</li></ul></li><li><p><strong>优化算法</strong>：</p><ul><li>单次遍历转换（Babel需多次遍历）</li><li>延迟Source Map生成</li><li>最小化AST复制操作</li></ul></li></ol><hr><h2 id="_3-核心功能特性" tabindex="-1">3. 核心功能特性 <a class="header-anchor" href="#_3-核心功能特性" aria-label="Permalink to &quot;3. 核心功能特性&quot;">​</a></h2><h3 id="_3-1-代码编译转换" tabindex="-1">3.1 代码编译转换 <a class="header-anchor" href="#_3-1-代码编译转换" aria-label="Permalink to &quot;3.1 代码编译转换&quot;">​</a></h3><ul><li><strong>语言支持</strong>： <ul><li>JavaScript (ES3 → ES2022)</li><li>TypeScript/TSX</li><li>JSX语法转换</li></ul></li><li><strong>语法降级</strong>：箭头函数、类、解构等ES6+特性转ES5</li><li><strong>Polyfill注入</strong>：自动按需注入辅助函数</li></ul><h3 id="_3-2-打包能力" tabindex="-1">3.2 打包能力 <a class="header-anchor" href="#_3-2-打包能力" aria-label="Permalink to &quot;3.2 打包能力&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// spack.config.js 示例</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    web: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/src/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 入口文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jsx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;swc-loader&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>Tree Shaking：消除未使用代码</li><li>模块合并：多文件→单一文件</li><li>资源加载：支持CSS/图片等</li></ul><h3 id="_3-3-其他能力" tabindex="-1">3.3 其他能力 <a class="header-anchor" href="#_3-3-其他能力" aria-label="Permalink to &quot;3.3 其他能力&quot;">​</a></h3><ul><li><strong>代码压缩</strong>：替代Terser，压缩率相当</li><li><strong>语法检查</strong>：基础语法错误检测</li><li><strong>环境适配</strong>：基于browserslist配置输出目标代码</li></ul><hr><h2 id="_4-使用方式与配置" tabindex="-1">4. 使用方式与配置 <a class="header-anchor" href="#_4-使用方式与配置" aria-label="Permalink to &quot;4. 使用方式与配置&quot;">​</a></h2><h3 id="_4-1-三种使用模式" tabindex="-1">4.1 三种使用模式 <a class="header-anchor" href="#_4-1-三种使用模式" aria-label="Permalink to &quot;4.1 三种使用模式&quot;">​</a></h3><ol><li><p><strong>CLI方式</strong>（快速测试）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @swc/cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @swc/core</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 目录编译</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 单文件编译</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>Node.js API</strong>（构建工具集成）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> swc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@swc/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transformFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsc: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parser: { syntax: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ecmascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es2015&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output.code);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><strong>配置文件</strong>（项目级配置）：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .swcrc 示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;jsc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;parser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;syntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;tsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;automatic&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;minify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 开启压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ol><h3 id="_4-2-关键配置项" tabindex="-1">4.2 关键配置项 <a class="header-anchor" href="#_4-2-关键配置项" aria-label="Permalink to &quot;4.2 关键配置项&quot;">​</a></h3><table tabindex="0"><thead><tr><th>配置项</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>jsc.target</code></td><td>string</td><td>输出目标(es3/es5/es2015...)</td></tr><tr><td><code>jsc.parser.syntax</code></td><td>string</td><td>源码类型(ecmascript/typescript)</td></tr><tr><td><code>jsc.parser.jsx</code></td><td>boolean</td><td>是否启用JSX</td></tr><tr><td><code>jsc.externalHelpers</code></td><td>boolean</td><td>是否外置helper函数</td></tr><tr><td><code>minify</code></td><td>boolean</td><td>启用代码压缩</td></tr><tr><td><code>env.targets</code></td><td>object</td><td>目标环境配置(如{&quot;ie&quot;:&quot;11&quot;})</td></tr></tbody></table><blockquote><p>提示：使用<code>jsc.externalHelpers: true</code>可避免helper重复注入</p></blockquote><hr><h2 id="_5-与babel的对比" tabindex="-1">5. 与Babel的对比 <a class="header-anchor" href="#_5-与babel的对比" aria-label="Permalink to &quot;5. 与Babel的对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>SWC</th><th>Babel</th></tr></thead><tbody><tr><td><strong>语言基础</strong></td><td>Rust</td><td>JavaScript</td></tr><tr><td><strong>编译速度</strong></td><td>快20-70倍</td><td>基准速度</td></tr><tr><td><strong>内存占用</strong></td><td>低(无GC)</td><td>较高</td></tr><tr><td><strong>插件系统</strong></td><td>内置优化，插件较少</td><td>丰富插件生态</td></tr><tr><td><strong>Tree Shaking</strong></td><td>内置支持</td><td>需插件</td></tr><tr><td><strong>压缩能力</strong></td><td>内置</td><td>需独立工具</td></tr><tr><td><strong>调试支持</strong></td><td>SourceMap可选</td><td>默认生成</td></tr><tr><td><strong>学习曲线</strong></td><td>配置简单</td><td>插件系统复杂</td></tr></tbody></table><blockquote><p><strong>何时选择SWC</strong>：大型项目、CI/CD流水线、开发体验要求高的场景</p></blockquote><hr><h2 id="_6-实际应用场景" tabindex="-1">6. 实际应用场景 <a class="header-anchor" href="#_6-实际应用场景" aria-label="Permalink to &quot;6. 实际应用场景&quot;">​</a></h2><h3 id="_6-1-框架集成" tabindex="-1">6.1 框架集成 <a class="header-anchor" href="#_6-1-框架集成" aria-label="Permalink to &quot;6.1 框架集成&quot;">​</a></h3><ul><li><strong>Next.js</strong>：v12+默认使用SWC替换Babel<div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建Next.js+SWC项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-next-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with-swc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>Vite</strong>：通过插件支持SWC<div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建Vite+React+TS+SWC项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-swc-ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="_6-2-混合编译方案" tabindex="-1">6.2 混合编译方案 <a class="header-anchor" href="#_6-2-混合编译方案" aria-label="Permalink to &quot;6.2 混合编译方案&quot;">​</a></h3>`,26)),(i(),l(p,null,{default:a(()=>[r(t,{id:"mermaid-556",class:"mermaid",graph:"graph%20TB%0AA%5BTS%E6%BA%90%E7%A0%81%5D%20--%3E%20B%5BSWC%E7%BC%96%E8%AF%91%5D%0AB%20--%3E%20C%5BJS%E8%BE%93%E5%87%BA%5D%0AD%5B%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%5D%20--%3E%20E%5Btsc%20--noEmit%5D%0A"})]),fallback:a(()=>s[1]||(s[1]=[e(" Loading... ")])),_:1})),s[4]||(s[4]=n(`<ul><li><strong>典型工作流</strong>： <ol><li>SWC负责代码转换（无类型检查）</li><li><code>tsc --noEmit</code>独立执行类型检查</li><li>构建速度提升50%+</li></ol></li></ul><h3 id="_6-3-旧项目迁移" tabindex="-1">6.3 旧项目迁移 <a class="header-anchor" href="#_6-3-旧项目迁移" aria-label="Permalink to &quot;6.3 旧项目迁移&quot;">​</a></h3><ol><li>安装依赖：<code>npm i @swc/core @swc/cli -D</code></li><li>替换构建脚本：<div class="language-diff vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- &quot;build&quot;: &quot;babel src -d dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ &quot;build&quot;: &quot;swc src -d dist&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>添加<code>.swcrc</code>配置文件</li><li>测试验证：对比输出差异</li></ol><hr><h2 id="_7-注意事项与限制" tabindex="-1">7. 注意事项与限制 <a class="header-anchor" href="#_7-注意事项与限制" aria-label="Permalink to &quot;7. 注意事项与限制&quot;">​</a></h2><ol><li><strong>类型检查</strong>：SWC<strong>不执行</strong>TypeScript类型检查，需配合<code>tsc --noEmit</code></li><li><strong>异步函数</strong>：转换async/await时可能自动注入<code>regenerator-runtime</code></li><li><strong>插件生态</strong>：相比Babel插件较少（但持续增长中）</li><li><strong>稳定性</strong>：复杂转换场景可能遇到边缘case</li><li><strong>调试支持</strong>：默认不生成Source Map（需显式配置）</li></ol><blockquote><p>最佳实践：开发环境启用SWC加速构建，生产环境保留Babel作为备用方案</p></blockquote><hr><h2 id="_8-学习资源" tabindex="-1">8. 学习资源 <a class="header-anchor" href="#_8-学习资源" aria-label="Permalink to &quot;8. 学习资源&quot;">​</a></h2><ol><li><a href="https://swc.rs/" target="_blank" rel="noreferrer">官方文档</a>：最权威的配置指南和API参考</li><li><a href="https://play.swc.rs/" target="_blank" rel="noreferrer">SWC Playground</a>：在线体验编译效果</li><li><a href="https://github.com/vercel/next.js/tree/canary/examples/with-swc" target="_blank" rel="noreferrer">Next.js + SWC示例</a></li><li><a href="https://juejin.cn/post/7291135064843304994" target="_blank" rel="noreferrer">Rust编译原理</a>：理解底层性能优势</li><li><a href="https://swc.rs/docs/migrating-from-babel" target="_blank" rel="noreferrer">Babel到SWC迁移指南</a></li></ol><blockquote><p>通过 <code>npx swc --help</code> 查看所有CLI选项，或使用 <code>swc.transform(code, options).then(console.log)</code> 探索Node API</p></blockquote><hr><p><strong>最后更新</strong>：2025年7月<br><strong>参考版本</strong>：SWC 1.4+</p><blockquote><p>“任何能被Rust重写的前端工具，终将被Rust重写”——前端“锈化”(rustification)趋势</p></blockquote>`,14))])}const C=h(o,[["render",c]]);export{F as __pageData,C as default};
