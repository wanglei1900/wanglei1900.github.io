import{_ as a,c as i,o as n,a7 as e}from"./chunks/framework.Dtft01Yp.js";const E=JSON.parse('{"title":"🌐 标签页跨页通信","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/browser/cross-tab-communication.md","filePath":"frontend/browser/cross-tab-communication.md","lastUpdated":1751880611000}'),l={name:"frontend/browser/cross-tab-communication.md"};function t(p,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="🌐-标签页跨页通信" tabindex="-1">🌐 标签页跨页通信 <a class="header-anchor" href="#🌐-标签页跨页通信" aria-label="Permalink to &quot;🌐 标签页跨页通信&quot;">​</a></h1><p>需求：浏览器不同 tab 标签页之间是独立的， 如果要通信必须通过特殊手段来实现跨标签页通信。</p><h2 id="⚓-一、broadcastchannel-webworker-可用" tabindex="-1">⚓ 一、BroadcastChannel(webworker 可用) <a class="header-anchor" href="#⚓-一、broadcastchannel-webworker-可用" aria-label="Permalink to &quot;⚓ 一、BroadcastChannel(webworker 可用)&quot;">​</a></h2><h3 id="_1-broadcastchannel" tabindex="-1">1. BroadcastChannel <a class="header-anchor" href="#_1-broadcastchannel" aria-label="Permalink to &quot;1. BroadcastChannel&quot;">​</a></h3><blockquote><p>BroadcastChannel 接口代理了一个命名频道，可以让指定 origin 下的任意 browsing context 来订阅它。它允许同源的不同浏览器窗口，Tab 页，frame 或者 iframe 下的不同文档之间相互通信。通过触发一个 message 事件，消息可以广播到所有监听了该频道的 BroadcastChannel 对象。</p></blockquote><p>BroadcastChannel 顾名思义 广播频道，这个 WEB API 设计用来跨标签页之间通信</p><ul><li><p>属性</p><ul><li><code>BroadcastChannel.name</code> 频道名称，返回 DOMString。</li></ul></li><li><p>事件处理程序</p><ul><li><p><code>BroadcastChannel.onmessage()</code>，或 <code>BroadcastChannel.addEventListener(&#39;message&#39;,callback)</code> 事件处理器，用于定义当该对象上触发了 message 事件时要执行的函数。</p></li><li><p><code>BroadcastChannel.onmessageerror()</code>，或 <code>BroadcastChannel.addEventListener(&#39;messageerror&#39;, callback)</code> 事件处理器，用于定义当该对象上触发了类型为 MessageError 的 MessageEvent 事件时要执行的函数。当接收到一条无法反序列化的消息时会触发此事件。</p></li></ul></li><li><p>方法</p><ul><li><code>BroadcastChannel.postMessage()</code> 向所有监听了相同频道的 BroadcastChannel 对象发送一条消息，消息内容可以是任意类型的数据。</li><li><code>BroadcastChannel.close()</code> 关闭频道对象，告诉它不要再接收新的消息，并允许它最终被垃圾回收。</li></ul></li></ul><h3 id="_2-代码示例" tabindex="-1">2. 代码示例 <a class="header-anchor" href="#_2-代码示例" aria-label="Permalink to &quot;2. 代码示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在一个标签页中发送消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BroadcastChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myChannel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,Bro!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在另一个或其他所有标签页中接受同频道消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> channel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BroadcastChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myChannel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello,Bro!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 断开频道连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><br><h2 id="⚓-二、storageevent-事件" tabindex="-1">⚓ 二、StorageEvent 事件 <a class="header-anchor" href="#⚓-二、storageevent-事件" aria-label="Permalink to &quot;⚓ 二、StorageEvent 事件&quot;">​</a></h2><h3 id="_1-storageevent" tabindex="-1">1. StorageEvent <a class="header-anchor" href="#_1-storageevent" aria-label="Permalink to &quot;1. StorageEvent&quot;">​</a></h3><p>当一个标签页 localStorage 变化时（sessionStorage 无效），同源下另一个或其他所有标签页使用 DOM2 监听 storage 事件监听，不能使用 DOM0 监听，最新 Chrome 不支持。</p><p>StorageEvent</p><blockquote><p>当前页面使用的 storage 被其他页面修改时会触发 StorageEvent 事件。</p></blockquote><p>事件在同一个域下的不同页面之间触发，即在 A 页面注册了 storge 的监听处理，只有在跟 A 同域名下的 B 页面操作 storage 对象，A 页面才会被触发 storage 事件</p><p>事件对象包含以下属性：</p><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>target 只读</td><td>[EventTarget]</td><td>事件目标 (DOM 树中的最大目标)</td></tr><tr><td>type 只读</td><td>[DOMString]</td><td>事件的类型</td></tr><tr><td>bubbles 只读</td><td>[Boolean]</td><td>事件通常是否会出现冒泡</td></tr><tr><td>cancelable 只读</td><td>[Boolean]</td><td>事件是否可取消</td></tr><tr><td>key 只读</td><td>[DOMString] (string)</td><td>键更改时</td></tr><tr><td>oldValue 只读</td><td>[DOMString] (string)</td><td>正在更改键的旧值</td></tr><tr><td>newValue 只读</td><td>[DOMString] (string)</td><td>正在更改键的新值</td></tr><tr><td>url 只读</td><td>DOMString</td><td>键更改的文档的地址</td></tr><tr><td>storageArea 只读</td><td>[Storage]</td><td>受影响的存储对象</td></tr></tbody></table><h3 id="_2-代码示例-1" tabindex="-1">2. 代码示例 <a class="header-anchor" href="#_2-代码示例-1" aria-label="Permalink to &quot;2. 代码示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在一个标签页中设置localStorage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sendMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,Bro!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在同源下另一个或所有的标签页下所有数据 监听storage 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;storage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.oldValu);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.newValue);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sendMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.newValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello,Bro!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h2 id="⚓-三、window-open-配合-window-postmessage" tabindex="-1">⚓ 三、window.open 配合 window.postMessage <a class="header-anchor" href="#⚓-三、window-open-配合-window-postmessage" aria-label="Permalink to &quot;⚓ 三、window.open 配合 window.postMessage&quot;">​</a></h2><h3 id="_1-window-postmessage" tabindex="-1">1. <code>window.postMessage()</code> <a class="header-anchor" href="#_1-window-postmessage" aria-label="Permalink to &quot;1. \`window.postMessage()\`&quot;">​</a></h3><blockquote><p>window.postMessage() 方法可以安全地实现跨源通信。</p></blockquote><p><code>otherWindow.postMessage(message, targetOrigin, [transfer])</code>;</p><ul><li>message：要发送的消息，可以是任意类型的数据。</li><li>targetOrigin：通过窗口的 origin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串&quot;_&quot;（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用 postMessage 传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的 origin 属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的 targetOrigin，而不是 _。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</li><li>transfer：可选的，是一串和 message 同时传递的 Transferable 对象。这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><p>targetOrigin 值可以是以下任意一个：</p><ul><li>一个 URI，表示该 URI 所表示的源。</li></ul><h3 id="_2-window-open" tabindex="-1">2. <code>window.open()</code> <a class="header-anchor" href="#_2-window-open" aria-label="Permalink to &quot;2. \`window.open()\`&quot;">​</a></h3><p><code>window.open(url?: string | URL, target?: string, features?: string): WindowProxy | null;</code></p><ul><li>url <ul><li>新url地址 或者 临时生成bolbUrl 预览</li></ul></li><li>target <ul><li><p>可选 <code>_self、_blank、_parent 和 _top</code></p><ul><li><p>_self：当前页面加载。（默认）</p></li><li><p>_blank：通常在新标签页打开，但用户可以通过配置选择在新窗口打开。</p></li><li><p>_parent：当前浏览环境的父级浏览上下文。如果没有父级框架，行为与 _self 相同。</p></li><li><p>_top：最顶级的浏览上下文（当前浏览上下文中最“高”的祖先）。如果没有祖先，行为与 _self 相同。</p></li></ul></li><li><p>自定义名字，可以保证每次重复点击后打开的都是同一个新页面。或者你需要操作新打开后的页面 可以获取返回值 const r = window.open(url, target, windowFeatures)</p></li></ul></li><li>windowFeatures <ul><li>基本只支持基础长宽和位置 <code>width=1080,height=780,top = 200,left=400</code> 。</li><li>其余这些属性<code>toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, status=no</code> 测试了几个浏览器现在基本都是无效的</li></ul></li><li>replace <ul><li>也已经舍弃，不要用了</li></ul></li></ul><h3 id="_3-代码示例" tabindex="-1">3. 代码示例 <a class="header-anchor" href="#_3-代码示例" aria-label="Permalink to &quot;3. 代码示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在一个标签页中发送消息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baidu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;baidu.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baidu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,Bro!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在window.open()打开的另一个标签页中接受消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Received Hello,Bro!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><h2 id="⚓-四、sharedworker-注意兼容性" tabindex="-1">⚓ 四、SharedWorker（注意兼容性） <a class="header-anchor" href="#⚓-四、sharedworker-注意兼容性" aria-label="Permalink to &quot;⚓ 四、SharedWorker（注意兼容性）&quot;">​</a></h2><blockquote><p>创建一个执行指定 url 脚本的共享 web worker。如果要使 SharedWorker 连接到多个不同的页面，这些页面必须是同源的（相同的协议、host 以及端口）。</p></blockquote><h3 id="_1-代码示例" tabindex="-1">1. 代码示例 <a class="header-anchor" href="#_1-代码示例" aria-label="Permalink to &quot;1. 代码示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// worker.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onconnect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.ports[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workerResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Result: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(workerResult);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用addEventListener 要手动加上. 如果使用onmessage则可以省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在不同页面中创建共享 web worker</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shareWorker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SharedWorker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./worker.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 接受信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shareWorker.port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送信息，可以传递任何东西</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shareWorker.port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;notifyTab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  payload: {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h2 id="⚓-五、indexeddb-定时器轮询-cookie-定时器轮询-websocket-等" tabindex="-1">⚓ 五、IndexedDB 定时器轮询，cookie 定时器轮询,Websocket 等 <a class="header-anchor" href="#⚓-五、indexeddb-定时器轮询-cookie-定时器轮询-websocket-等" aria-label="Permalink to &quot;⚓ 五、IndexedDB 定时器轮询，cookie 定时器轮询,Websocket 等&quot;">​</a></h2><br><h2 id="⚓-六、总结" tabindex="-1">⚓ 六、总结 <a class="header-anchor" href="#⚓-六、总结" aria-label="Permalink to &quot;⚓ 六、总结&quot;">​</a></h2><ul><li>BroadcastChannel 实时广播，给所有打开的标签页发送通知</li><li>StorageEvent 适合场景用到共享持久存储相关</li><li>window.open 配合 window.postMessage 可以跨源</li></ul>`,44)]))}const g=a(l,[["render",t]]);export{E as __pageData,g as default};
