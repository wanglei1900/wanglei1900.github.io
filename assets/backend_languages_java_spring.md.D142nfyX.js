import{_ as i,c as a,o as n,a7 as t}from"./chunks/framework.Dtft01Yp.js";const g=JSON.parse('{"title":"Spring框架学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"backend/languages/java/spring.md","filePath":"backend/languages/java/spring.md","lastUpdated":1752569659000}'),e={name:"backend/languages/java/spring.md"};function l(r,s,p,h,o,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="spring框架学习笔记" tabindex="-1">Spring框架学习笔记 <a class="header-anchor" href="#spring框架学习笔记" aria-label="Permalink to &quot;Spring框架学习笔记&quot;">​</a></h1><h2 id="一、spring框架概述" tabindex="-1">一、Spring框架概述 <a class="header-anchor" href="#一、spring框架概述" aria-label="Permalink to &quot;一、Spring框架概述&quot;">​</a></h2><p><strong>Spring</strong>是一个轻量级的开源Java EE应用框架，以<strong>IoC（控制反转）</strong> 和<strong>AOP（面向切面编程）</strong> 为核心，提供一站式分层解决方案：</p><ul><li><strong>表现层</strong>：Spring MVC框架支持</li><li><strong>业务层</strong>：事务管理、日志记录等</li><li><strong>持久层</strong>：集成JDBC、Hibernate、MyBatis等</li></ul><h3 id="核心优势" tabindex="-1">核心优势 <a class="header-anchor" href="#核心优势" aria-label="Permalink to &quot;核心优势&quot;">​</a></h3><ul><li><strong>解耦设计</strong>：通过IoC容器管理对象依赖关系</li><li><strong>非侵入式</strong>：业务逻辑不依赖框架API</li><li><strong>声明式编程</strong>：通过配置实现事务、安全等横切关注点</li><li><strong>模块化架构</strong>：20+模块可按需使用</li></ul><hr><h2 id="二、spring体系结构" tabindex="-1">二、Spring体系结构 <a class="header-anchor" href="#二、spring体系结构" aria-label="Permalink to &quot;二、Spring体系结构&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>模块组</strong></th><th><strong>包含模块</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><strong>Core Container</strong></td><td>Beans, Core, Context, SpEL</td><td>提供IoC/DI基础支持，Bean生命周期管理</td></tr><tr><td><strong>Data Access/Integration</strong></td><td>JDBC, ORM, Transactions</td><td>数据库访问抽象，支持声明式事务</td></tr><tr><td><strong>Web</strong></td><td>Web, Servlet, WebSocket</td><td>Web开发支持，REST服务构建</td></tr><tr><td><strong>AOP</strong></td><td>AOP, Aspects</td><td>面向切面编程实现</td></tr><tr><td><strong>Test</strong></td><td>Test</td><td>集成测试支持</td></tr></tbody></table><blockquote><p><strong>Spring 5+新特性</strong>：响应式编程、Kotlin支持、函数式Web框架、JDK 8+基线要求</p></blockquote><hr><h2 id="三、ioc-控制反转-与di-依赖注入" tabindex="-1">三、IoC（控制反转）与DI（依赖注入） <a class="header-anchor" href="#三、ioc-控制反转-与di-依赖注入" aria-label="Permalink to &quot;三、IoC（控制反转）与DI（依赖注入）&quot;">​</a></h2><h3 id="_1-核心概念" tabindex="-1">1. 核心概念 <a class="header-anchor" href="#_1-核心概念" aria-label="Permalink to &quot;1. 核心概念&quot;">​</a></h3><ul><li><strong>IoC</strong>：将对象创建权从程序转移至Spring容器</li><li><strong>DI</strong>：容器动态注入对象依赖关系，实现解耦</li></ul><h3 id="_2-依赖注入方式" tabindex="-1">2. 依赖注入方式 <a class="header-anchor" href="#_2-依赖注入方式" aria-label="Permalink to &quot;2. 依赖注入方式&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>实现方式</strong></th><th><strong>示例代码</strong></th></tr></thead><tbody><tr><td><strong>构造器注入</strong></td><td><code>&lt;constructor-arg&gt;</code>元素</td><td><code>&lt;bean id=&quot;demo&quot; class=&quot;com.Demo&quot;&gt;&lt;constructor-arg ref=&quot;depBean&quot;/&gt;&lt;/bean&gt;</code></td></tr><tr><td><strong>Setter注入</strong></td><td><code>&lt;property&gt;</code>元素</td><td><code>&lt;bean id=&quot;demo&quot; class=&quot;com.Demo&quot;&gt;&lt;property name=&quot;service&quot; ref=&quot;svc&quot;/&gt;&lt;/bean&gt;</code></td></tr><tr><td><strong>接口注入</strong></td><td>实现特定接口</td><td>已逐渐被前两种替代</td></tr><tr><td><strong>注解注入</strong></td><td><code>@Autowired</code>, <code>@Resource</code></td><td><code>@Autowired private Service service;</code></td></tr></tbody></table><h3 id="_3-bean作用域" tabindex="-1">3. Bean作用域 <a class="header-anchor" href="#_3-bean作用域" aria-label="Permalink to &quot;3. Bean作用域&quot;">​</a></h3><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.Example&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prototype&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>singleton</strong>：单例（默认），容器中唯一实例</li><li><strong>prototype</strong>：每次请求创建新实例</li><li><strong>request/session</strong>：Web应用中请求/会话级实例</li></ul><hr><h2 id="四、aop-面向切面编程" tabindex="-1">四、AOP（面向切面编程） <a class="header-anchor" href="#四、aop-面向切面编程" aria-label="Permalink to &quot;四、AOP（面向切面编程）&quot;">​</a></h2><h3 id="_1-核心概念-1" tabindex="-1">1. 核心概念 <a class="header-anchor" href="#_1-核心概念-1" aria-label="Permalink to &quot;1. 核心概念&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LogAspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;execution(* com.service.*.*(..))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JoinPoint </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">jp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;方法调用: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>切面（Aspect）</strong>：横切关注点的模块化（如日志）</li><li><strong>连接点（Joinpoint）</strong>：程序执行点（方法调用）</li><li><strong>通知（Advice）</strong>：切面在连接点的动作</li><li><strong>切入点（Pointcut）</strong>：匹配连接点的表达式</li></ul><h3 id="_2-实现方式" tabindex="-1">2. 实现方式 <a class="header-anchor" href="#_2-实现方式" aria-label="Permalink to &quot;2. 实现方式&quot;">​</a></h3><ol><li><strong>Spring AOP API</strong>：<code>MethodBeforeAdvice</code>, <code>AfterReturningAdvice</code>接口</li><li><strong>AspectJ注解</strong>：<code>@Aspect</code>, <code>@Pointcut</code>, <code>@Before</code>等</li><li><strong>XML配置</strong>：<code>&lt;aop:config&gt;</code>定义切面和通知</li></ol><hr><h2 id="五、spring配置管理" tabindex="-1">五、Spring配置管理 <a class="header-anchor" href="#五、spring配置管理" aria-label="Permalink to &quot;五、Spring配置管理&quot;">​</a></h2><h3 id="_1-xml配置-vs-注解配置" tabindex="-1">1. XML配置 vs 注解配置 <a class="header-anchor" href="#_1-xml配置-vs-注解配置" aria-label="Permalink to &quot;1. XML配置 vs 注解配置&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>XML配置</strong></th><th><strong>注解配置</strong></th></tr></thead><tbody><tr><td><strong>解耦度</strong></td><td>高（配置与代码分离）</td><td>低（配置嵌入代码）</td></tr><tr><td><strong>可读性</strong></td><td>集中管理，结构清晰</td><td>分散在各类中</td></tr><tr><td><strong>适用场景</strong></td><td>第三方库集成，全局配置</td><td>自定义组件，快速开发</td></tr></tbody></table><h3 id="_2-常用注解" tabindex="-1">2. 常用注解 <a class="header-anchor" href="#_2-常用注解" aria-label="Permalink to &quot;2. 常用注解&quot;">​</a></h3><ul><li><strong>组件扫描</strong>：<code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code></li><li><strong>依赖注入</strong>：<code>@Autowired</code>（按类型）, <code>@Qualifier</code>（按名称）</li><li><strong>配置类</strong>：<code>@Configuration</code>, <code>@Bean</code></li><li><strong>作用域</strong>：<code>@Scope(&quot;prototype&quot;)</code></li></ul><hr><h2 id="六、spring-mvc框架" tabindex="-1">六、Spring MVC框架 <a class="header-anchor" href="#六、spring-mvc框架" aria-label="Permalink to &quot;六、Spring MVC框架&quot;">​</a></h2><h3 id="_1-请求处理流程" tabindex="-1">1. 请求处理流程 <a class="header-anchor" href="#_1-请求处理流程" aria-label="Permalink to &quot;1. 请求处理流程&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>客户端请求 → DispatcherServlet → 处理器映射 → 控制器 → 模型视图 → 视图解析器 → 渲染响应</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-核心组件" tabindex="-1">2. 核心组件 <a class="header-anchor" href="#_2-核心组件" aria-label="Permalink to &quot;2. 核心组件&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><strong><code>@Controller</code></strong>：标记MVC控制器</li><li><strong><code>@RequestMapping</code></strong>：映射URL到处理方法</li><li><strong><code>ViewResolver</code></strong>：解析逻辑视图名到实际视图</li><li><strong><code>Model</code></strong>：传递数据到视图层</li></ul><hr><h2 id="七、spring-boot实战" tabindex="-1">七、Spring Boot实战 <a class="header-anchor" href="#七、spring-boot实战" aria-label="Permalink to &quot;七、Spring Boot实战&quot;">​</a></h2><h3 id="_1-核心特性" tabindex="-1">1. 核心特性 <a class="header-anchor" href="#_1-核心特性" aria-label="Permalink to &quot;1. 核心特性&quot;">​</a></h3><ul><li><strong>自动配置</strong>：根据依赖自动配置Bean</li><li><strong>起步依赖</strong>：简化Maven/Gradle配置</li><li><strong>内嵌容器</strong>：默认集成Tomcat/Jetty</li><li><strong>Actuator监控</strong>：提供应用健康检查、指标收集</li></ul><h3 id="_2-项目搭建步骤" tabindex="-1">2. 项目搭建步骤 <a class="header-anchor" href="#_2-项目搭建步骤" aria-label="Permalink to &quot;2. 项目搭建步骤&quot;">​</a></h3><ol><li><strong>初始化</strong>：使用<a href="https://start.spring.io/" target="_blank" rel="noreferrer">start.spring.io</a>生成项目</li><li><strong>添加依赖</strong>（pom.xml示例）：</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.mybatis.spring.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.2.2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="3"><li><strong>配置文件</strong>（application.yml）：</li></ol><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  datasource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jdbc:mysql://localhost:3306/db</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="八、设计模式应用" tabindex="-1">八、设计模式应用 <a class="header-anchor" href="#八、设计模式应用" aria-label="Permalink to &quot;八、设计模式应用&quot;">​</a></h2><p>Spring框架中体现了多种经典设计模式：</p><ul><li><strong>工厂模式</strong>：<code>BeanFactory</code>创建管理对象</li><li><strong>单例模式</strong>：Bean默认单例作用域</li><li><strong>代理模式</strong>：AOP动态代理实现</li><li><strong>模板方法</strong>：<code>JdbcTemplate</code>, <code>RestTemplate</code>等</li><li><strong>观察者模式</strong>：<code>ApplicationEvent</code>事件机制</li></ul><hr><h2 id="九、最佳实践" tabindex="-1">九、最佳实践 <a class="header-anchor" href="#九、最佳实践" aria-label="Permalink to &quot;九、最佳实践&quot;">​</a></h2><ol><li><strong>分层清晰</strong>：Controller（请求处理）→ Service（业务逻辑）→ DAO（数据访问）</li><li><strong>使用构造器注入</strong>：避免循环依赖，保证对象不可变性</li><li><strong>组合注解</strong>：如<code>@SpringBootApplication</code> = <code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code></li><li><strong>Profile区分环境</strong>：<code>@Profile(&quot;dev&quot;)</code>管理不同环境配置</li><li><strong>异常统一处理</strong>：<code>@ControllerAdvice</code>全局异常处理</li></ol><blockquote><p><strong>学习资源</strong>：</p><ul><li>官方文档：<a href="https://spring.io/" target="_blank" rel="noreferrer">spring.io</a></li><li>实战课程：<a href="https://www.imooc.com/" target="_blank" rel="noreferrer">慕课网Spring Boot</a></li><li>社区支持：<a href="https://stackoverflow.com/questions/tagged/spring" target="_blank" rel="noreferrer">Stack Overflow</a></li></ul></blockquote><p>通过系统掌握Spring核心机制，开发者可构建松耦合、易维护的企业级应用，为微服务和云原生开发奠定坚实基础。</p>`,57)]))}const c=i(e,[["render",l]]);export{g as __pageData,c as default};
