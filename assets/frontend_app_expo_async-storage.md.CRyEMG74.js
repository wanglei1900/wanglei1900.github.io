import{_ as e,c as t,o as r,a7 as o}from"./chunks/framework.Dtft01Yp.js";const S=JSON.parse('{"title":"Async Storage","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/app/expo/async-storage.md","filePath":"frontend/app/expo/async-storage.md","lastUpdated":1751275676000}'),s={name:"frontend/app/expo/async-storage.md"};function n(i,a,c,l,p,d){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="async-storage" tabindex="-1">Async Storage <a class="header-anchor" href="#async-storage" aria-label="Permalink to &quot;Async Storage&quot;">​</a></h1><p>@react-native-async-storage/async-storage库是React Native社区提供的一个强大且易于使用的工具，主要用于React Native应用程序的本地数据存储。</p><p><a href="https://react-native-async-storage.github.io/async-storage/" target="_blank" rel="noreferrer">Async Storage 文档</a></p><p>在React Native中，AsyncStorage是一个用于持久化存储的键值对系统，它提供了异步的API来访问存储的数据。对于iOS和Android平台，AsyncStorage的实现方式如下：</p><ul><li>iOS平台： <ul><li>AsyncStorage在iOS上的实现通常利用了系统的Keychain服务（对于敏感数据）或者NSUserDefaults（对于非敏感数据）。</li><li>对于较大的数据，AsyncStorage可能会将数据写入到单独的文件中，而不是使用NSUserDefaults。</li></ul></li><li>Android平台： <ul><li>在Android上，AsyncStorage的实现可能依赖于RocksDB或者SQLite等存储引擎。</li><li>具体的实现可能会因React Native的版本和所使用的AsyncStorage库的不同而有所差异。</li></ul></li><li>web <ul><li>localStorage来实现</li></ul></li></ul>',5)]))}const _=e(s,[["render",n]]);export{S as __pageData,_ as default};
