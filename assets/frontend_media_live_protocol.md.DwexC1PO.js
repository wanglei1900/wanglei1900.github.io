import{_ as r,C as B,c as o,o as e,a7 as A,b as E,w as a,a as l,G as d,a8 as i}from"./chunks/framework.Dtft01Yp.js";const k=JSON.parse('{"title":"📺 了解直播/实时监控 需要掌握的背景知识","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/media/live/protocol.md","filePath":"frontend/media/live/protocol.md","lastUpdated":1751869578000}'),n={name:"frontend/media/live/protocol.md"};function h(p,t,f,C,c,D){const s=B("Mermaid");return e(),o("div",null,[t[2]||(t[2]=A('<h1 id="📺-了解直播-实时监控-需要掌握的背景知识" tabindex="-1">📺 了解直播/实时监控 需要掌握的背景知识 <a class="header-anchor" href="#📺-了解直播-实时监控-需要掌握的背景知识" aria-label="Permalink to &quot;📺 了解直播/实时监控 需要掌握的背景知识&quot;">​</a></h1><ul><li>🚩 <a href="https://driverzhang.github.io/post/%E7%9B%B4%E6%92%AD%E5%8D%8F%E8%AE%AErtmphlshttp-flv/" target="_blank">直播流(协议)有哪些？</a></li><li>🚩 <a href="https://www.jianshu.com/p/32417d8ee5b6" target="_blank">理解RTMP、HttpFlv和HLS</a></li><li>🚩 <a href="https://blog.csdn.net/daocaokafei/article/details/127098972" target="_blank">什么是RTMP 和 RTSP？</a></li><li>🚩 <a href="https://zhuanlan.zhihu.com/p/151341201" target="_blank">什么是推拉流</a></li></ul><h2 id="✏️-一、简单总结" tabindex="-1">✏️ 一、简单总结 <a class="header-anchor" href="#✏️-一、简单总结" aria-label="Permalink to &quot;✏️ 一、简单总结&quot;">​</a></h2><ol><li>常见的直播流协议有RTSP, RTMP, HLS, HTTPFLV等</li><li>流媒体分为推流端，流媒体服务器和拉流端。记住两端加一服。推流是采集视频信号到服务器，拉流是从服务器接受数据。</li><li>RTMP可以应用在推拉流的双端，WEB网页中需要使用RTMP需要安装插件。优点兼容性好（服务器端）、低延迟，缺点需要网页端不支持并且需要插件。其中监控领域海康大华都是将采集到的RTSP数据需转为RTMP流进行推送。并且现在flv.js库解封包使得RTMP也可以在网页端直接播放了。</li><li>RTSP广泛应用于摄像机、无人机和物流网设备中，优点延迟低，缺点视频播放器和流媒体服务器并未广泛支持，所以通常需要通过ffmpeg库将RTSP流转换为RTMP来进行推流。</li><li>HLS只能使用在拉流端，适用于苹果和PC还有移动端，H5的video标签可以直接对其进行播放。优点兼容性好无需插件，缺点延时较RTMP大。</li><li>HTTP-FLV 本来在H5中需要使用插件，需要Flash支持，兼容性差。有了flv.js出现后则打破了以上问题。直播平台和手机直播使用的比较多。</li></ol><br><h2 id="🎯-二、推拉流的示意图" tabindex="-1">🎯 二、推拉流的示意图 <a class="header-anchor" href="#🎯-二、推拉流的示意图" aria-label="Permalink to &quot;🎯 二、推拉流的示意图&quot;">​</a></h2>',6)),(e(),E(i,null,{default:a(()=>[d(s,{id:"mermaid-64",class:"mermaid",graph:"---%0Atitle%3A%20%E6%8E%A8%E6%8B%89%E6%B5%81%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE%0A---%0Agraph%20LR%0A%20%20%20subgraph%20%E6%8E%A8%E6%B5%81%E7%AB%AF%0A%20%20%20%20%20A%5B%E6%8E%A8%E6%B5%81%E7%AB%AF%5D%0A%20%20%20end%0A%0A%20%20%20subgraph%20%E6%BA%90%E7%AB%99%0A%20%20%20%20%20B%5B%E6%BA%90%E7%AB%99%5D%0A%20%20%20end%0A%0A%20%20%20subgraph%20CDN%E7%BD%91%E7%BB%9C%0A%20%20%20%20%20C%5BCDN%E8%8A%82%E7%82%B9%5D%0A%20%20%20%20%20D%5BCDN%E8%8A%82%E7%82%B9%5D%0A%20%20%20end%0A%0A%20%20%20subgraph%20%E6%92%AD%E6%94%BE%E7%AB%AF%E9%9B%86%E7%BE%A4%0A%20%20%20%20%20E%5B4%20RTMP%E6%8B%89%E6%B5%81%E6%92%AD%E6%94%BE%E7%AB%AF%5D%0A%20%20%20%20%20F%5B5%20RTMP%E6%8B%89%E6%B5%81%E6%92%AD%E6%94%BE%E7%AB%AF%5D%0A%20%20%20%20%20G%5B6%20HLS%E6%8B%89%E6%B5%81%E6%92%AD%E6%94%BE%E7%AB%AF%5D%0A%20%20%20%20%20H%5B7%20HTTP-FLV%E6%8B%89%E6%B5%81%E6%92%AD%E6%94%BE%E7%AB%AF%5D%0A%20%20%20%20%20I%5B8%20RTMP%E6%8B%89%E6%B5%81%E6%92%AD%E6%94%BE%E7%AB%AF%5D%0A%20%20%20end%0A%0A%20%20%20A%20--%201%20%E4%B8%8A%E8%A1%8CRTMP%E6%8E%A8%E6%B5%81%20--%3E%20B%0A%20%20%20B%20--%202%20RTMP%E6%8B%89%E6%B5%81%20--%3E%20C%0A%20%20%20B%20--%203%20RTMP%E6%8B%89%E6%B5%81%20--%3E%20D%0A%20%20%20D%20--%3E%20E%0A%20%20%20D%20--%3E%20F%0A%20%20%20D%20--%3E%20G%0A%20%20%20D%20--%3E%20H%0A%0A%20%20%20classDef%20push%20fill%3A%23e6f7ff%2Cstroke%3A%231890ff%2Cstroke-width%3A2px%0A%20%20%20classDef%20cdn%20fill%3A%23f6ffed%2Cstroke%3A%2352c41a%2Cstroke-width%3A2px%0A%20%20%20classDef%20pull%20fill%3A%23fff7e6%2Cstroke%3A%23fa8c16%2Cstroke-width%3A2px%0A%20%20%20class%20A%2CB%20push%0A%20%20%20class%20C%2CD%20cdn%0A%20%20%20class%20E%2CF%2CG%2CH%2CI%20pull%0A"})]),fallback:a(()=>t[0]||(t[0]=[l(" Loading... ")])),_:1})),t[3]||(t[3]=A('<br><h2 id="💬-三、推流码构成" tabindex="-1">💬 三、推流码构成 <a class="header-anchor" href="#💬-三、推流码构成" aria-label="Permalink to &quot;💬 三、推流码构成&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rtmp://服务器地址/目录名/节点名?streamkey=密钥内容&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',3)),(e(),E(i,null,{default:a(()=>[d(s,{id:"mermaid-70",class:"mermaid",graph:"---%0Atitle%3A%20%E6%8E%A8%E6%B5%81%E7%A0%81%E6%9E%84%E6%88%90%0A---%0Agraph%20TD%0A%20%20%20%20A%5BRTMP%E6%8E%A8%E6%B5%81%E7%A0%81%5D%20--%3E%20B%5BURL%5D%0A%20%20%20%20A%20--%3E%20C%5BStream%20Key%5D%0A%20%20%20%20%0A%20%20%20%20%25%25%20URL%E9%83%A8%E5%88%86%0A%20%20%20%20B%20--%3E%20D%5B%E5%8D%8F%E8%AE%AE%3A%20rtmp%3A%2F%2F%5D%0A%20%20%20%20B%20--%3E%20E%5B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E5%9D%80%5D%0A%20%20%20%20B%20--%3E%20F%5B%E7%9B%AE%E5%BD%95%E5%90%8D%5D%0A%20%20%20%20B%20--%3E%20G%5B%E8%8A%82%E7%82%B9%E5%90%8D%5D%0A%20%20%20%20%0A%20%20%20%20D%20--%3E%20H%5B%E5%9B%BA%E5%AE%9A%E5%80%BC%5D%0A%20%20%20%20E%20--%3E%20I%5B%E7%A4%BA%E4%BE%8B%3A%20xxx%5D%0A%20%20%20%20F%20--%3E%20J%5B%E7%A4%BA%E4%BE%8B%3A%20xxx%5D%0A%20%20%20%20G%20--%3E%20K%5B%E7%A4%BA%E4%BE%8B%3A%20xxxxx%5D%0A%20%20%20%20%0A%20%20%20%20%25%25%20Stream%20Key%E9%83%A8%E5%88%86%0A%20%20%20%20C%20--%3E%20L%5B%E5%AF%86%E9%92%A5%E5%86%85%E5%AE%B9%5D%0A%20%20%20%20L%20--%3E%20M%5B%E7%A4%BA%E4%BE%8B%3A%20xxxxxx%5D%0A%20%20%20%20%0A%20%20%20%20%25%25%20%E6%A0%B7%E5%BC%8F%E5%AE%9A%E4%B9%89%0A%20%20%20%20classDef%20header%20fill%3A%232e86c1%2Cstroke%3A%231b4f72%2Ccolor%3Awhite%3B%0A%20%20%20%20classDef%20url%20fill%3A%2385c1e9%2Cstroke%3A%233498db%3B%0A%20%20%20%20classDef%20key%20fill%3A%2382e0aa%2Cstroke%3A%2327ae60%3B%0A%20%20%20%20classDef%20example%20fill%3A%23f7f9f9%2Cstroke%3A%23bdc3c7%3B%0A%20%20%20%20%0A%20%20%20%20class%20A%20header%3B%0A%20%20%20%20class%20B%2CC%20url%3B%0A%20%20%20%20class%20D%2CE%2CF%2CG%20url%3B%0A%20%20%20%20class%20L%20key%3B%0A%20%20%20%20class%20H%2CI%2CJ%2CK%2CM%20example%3B%0A"})]),fallback:a(()=>t[1]||(t[1]=[l(" Loading... ")])),_:1})),t[4]||(t[4]=A('<br><h2 id="📐-四、视频流传输协议的对比" tabindex="-1">📐 四、视频流传输协议的对比 <a class="header-anchor" href="#📐-四、视频流传输协议的对比" aria-label="Permalink to &quot;📐 四、视频流传输协议的对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>协议</th><th>传输方式</th><th>视频封装格式</th><th>延时</th><th>数据分段</th><th>HTML5播放支持</th></tr></thead><tbody><tr><td><strong>HTTP-FLV/WS-FLV</strong></td><td>HTTP/WebSocket</td><td>FLV</td><td>低</td><td>连续流</td><td>通过flv.js库解封包</td></tr><tr><td><strong>RTSP</strong></td><td>UDP、TCP</td><td>TS、MP4</td><td>低</td><td>数据包、连续流</td><td>不支持</td></tr><tr><td><strong>RTMP</strong></td><td>TCP</td><td>FLV、TGA</td><td>低</td><td>切片文件</td><td>通过flv.js库解封</td></tr><tr><td><strong>HLS</strong></td><td>HTTP</td><td>TS</td><td>高</td><td>切片文件</td><td>支持</td></tr><tr><td><strong>DASH</strong></td><td>HTTP</td><td>MP4、3GP、WebM</td><td>高</td><td>切片文件</td><td>MP4和WebM文件可直接播放</td></tr></tbody></table><br><p>像安防实时监控领域，前端这边涉及到的就是如何从服务器拉流然后展示给客户，重点也就是获取rtsp地址和通道号，具体如何使用不在本篇文章中，像海康、大华等一般都有完整的开发手册供参考。</p>',5))])}const P=r(n,[["render",h]]);export{k as __pageData,P as default};
