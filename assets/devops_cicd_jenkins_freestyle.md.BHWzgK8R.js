import{_ as i,c as n,o as a,a7 as l}from"./chunks/framework.Dtft01Yp.js";const p="/img/cicd/%E6%8F%92%E4%BB%B6%E6%AD%A5%E9%AA%A41.png",e="/img/cicd/%E6%8F%92%E4%BB%B6%E6%AD%A5%E9%AA%A42.png",h="/img/cicd/SSH%E6%AD%A5%E9%AA%A41.png",t="/img/cicd/SSH%E6%AD%A5%E9%AA%A42.png",k="/img/cicd/SSH%E6%AD%A5%E9%AA%A43.png",r="/img/cicd/nodejs%E6%AD%A5%E9%AA%A41.png",d="/img/cicd/nodejs%E6%AD%A5%E9%AA%A42.png",c="/img/cicd/nodejs%E6%AD%A5%E9%AA%A43.png",o="/img/cicd/%E5%87%AD%E8%AF%81%E6%AD%A5%E9%AA%A41.png",g="/img/cicd/%E5%87%AD%E8%AF%81%E6%AD%A5%E9%AA%A42.png",F="/img/cicd/%E5%87%AD%E8%AF%81%E6%AD%A5%E9%AA%A43.png",b="/img/cicd/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A41.png",m="/img/cicd/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A42.png",y="/img/cicd/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A43.png",u="/img/cicd/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A44.png",E="/img/cicd/webhook%E6%AD%A5%E9%AA%A41.png",C="/img/cicd/webhook%E6%AD%A5%E9%AA%A42.png",A="/img/cicd/webhook%E6%AD%A5%E9%AA%A43.png",B="/img/cicd/webhook%E6%AD%A5%E9%AA%A44.png",D="/img/cicd/%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83.png",_="/img/cicd/buildstep%E6%AD%A5%E9%AA%A41.png",v="/img/cicd/buildstep%E6%AD%A5%E9%AA%A42.png",x="/img/cicd/%E6%89%A7%E8%A1%8Cshell%E6%AD%A5%E9%AA%A41.png",q="/img/cicd/%E6%89%A7%E8%A1%8Cshell%E6%AD%A5%E9%AA%A42.png",f="/img/cicd/%E6%89%A7%E8%A1%8Cshell%E6%AD%A5%E9%AA%A43.png",j="/img/cicd/%E6%89%A7%E8%A1%8Cshell%E6%AD%A5%E9%AA%A44.png",S="/img/cicd/%E6%89%A7%E8%A1%8Cshell%E6%AD%A5%E9%AA%A45.png",w="/img/cicd/%E6%9E%84%E5%BB%BA%E5%90%8E%E6%AD%A5%E9%AA%A41.png",P="/img/cicd/%E6%9E%84%E5%BB%BA%E5%90%8E%E6%AD%A5%E9%AA%A42.png",J="/img/cicd/%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A41.png",H="/img/cicd/%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A42.png",z="/img/cicd/%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A43.png",U=JSON.parse('{"title":"🤖 Jenkins","description":"","frontmatter":{},"headers":[],"relativePath":"devops/cicd/jenkins/freestyle.md","filePath":"devops/cicd/jenkins/freestyle.md","lastUpdated":1751620819000}'),N={name:"devops/cicd/jenkins/freestyle.md"};function T(R,s,$,G,I,M){return a(),n("div",null,s[0]||(s[0]=[l(`<h1 id="🤖-jenkins" tabindex="-1">🤖 Jenkins <a class="header-anchor" href="#🤖-jenkins" aria-label="Permalink to &quot;🤖 Jenkins&quot;">​</a></h1><blockquote><p>Jenkins是一个开源的自动化服务器，用于支持软件开发中的持续集成与持续部署（CI/CD）。它是一个自由及开源的自动化工具，提供了友好的操作界面，允许开发团队自动化地执行各种任务，如代码构建、测试、部署等。Jenkins由Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。</p></blockquote><h2 id="_1-jenkins" tabindex="-1">1 Jenkins <a class="header-anchor" href="#_1-jenkins" aria-label="Permalink to &quot;1 Jenkins&quot;">​</a></h2><p>前置知识：</p><h3 id="_1-1-jenkins-核心概念" tabindex="-1">1.1 Jenkins 核心概念 <a class="header-anchor" href="#_1-1-jenkins-核心概念" aria-label="Permalink to &quot;1.1 Jenkins 核心概念&quot;">​</a></h3><ul><li>开源性：Jenkins是一个开放源代码软件，任何人都可以查看其源代码、进行修改和贡献。这使得Jenkins能够免费提供，并确保其长期的发展和维护。</li><li>持续集成与持续部署：Jenkins为开发团队提供了一个平台，使其能够自动化地执行构建、测试和部署等任务。这种自动化使得开发流程更为流畅，可以快速地发现和修复问题，从而加快软件的发布速度。</li><li>丰富的插件生态系统：Jenkins拥有一个强大的插件生态系统，涵盖了从源代码管理、构建、测试到部署的各个环节。这些插件允许用户根据特定需求定制Jenkins，以满足不同的自动化需求。</li><li>跨平台支持：Jenkins可以在Windows、Linux和Mac OS等操作系统上运行，具有很强的跨平台支持能力。</li></ul><h3 id="_1-2-jenkins-优点" tabindex="-1">1.2 Jenkins 优点 <a class="header-anchor" href="#_1-2-jenkins-优点" aria-label="Permalink to &quot;1.2 Jenkins 优点&quot;">​</a></h3><ol><li>提高开发效率： <ul><li>Jenkins 自动化了构建、测试和部署等任务，减少了人工操作的时间和错误，使开发团队能够更专注于编写高质量的代码。</li><li>自动化流程缩短了反馈周期，使问题能够更快地被发现和修复。</li></ul></li><li>增强软件质量： <ul><li>持续的集成和测试有助于在早期发现并修复问题，避免问题累积到后期造成更大的影响。</li><li>Jenkins 支持多种测试框架，可以执行单元测试、集成测试等多种类型的测试，确保软件的全面质量。</li></ul></li><li>支持快速迭代： <ul><li>Jenkins 使得软件发布过程更加高效和灵活，支持频繁的发布和迭代，满足现代软件开发快速变化的需求。</li><li>自动化部署减少了人为错误，提高了部署的可靠性和稳定性。</li></ul></li><li>易于配置和扩展： <ul><li>Jenkins 提供了丰富的插件生态系统，用户可以根据需要选择和安装各种插件来扩展其功能。</li><li>通过简单的配置和脚本编写，用户可以轻松定义自己的构建和部署流程。</li></ul></li><li>社区支持和文档丰富： <ul><li>Jenkins 是一个开源项目，拥有庞大的用户社区和活跃的开发者贡献者，用户可以获得及时的技术支持和解决方案。</li><li>Jenkins 的官方文档和社区资源也非常丰富，有助于用户快速上手和解决问题。</li></ul></li><li>跨平台支持： <ul><li>Jenkins 可以在多种操作系统上运行，包括Linux、Windows和Mac OS等，提供了良好的跨平台支持能力。</li></ul></li></ol><br><br><br><h2 id="_2-jenkins-安装" tabindex="-1">2 Jenkins 安装 <a class="header-anchor" href="#_2-jenkins-安装" aria-label="Permalink to &quot;2 Jenkins 安装&quot;">​</a></h2><h3 id="_2-1-前置准备工作" tabindex="-1">2.1 前置准备工作 <a class="header-anchor" href="#_2-1-前置准备工作" aria-label="Permalink to &quot;2.1 前置准备工作&quot;">​</a></h3><p><a href="./docker">🚀 手把手教你部署前端项目CI/CD 第一篇 Docker 篇 </a></p><h4 id="_2-1-1-git-安装" tabindex="-1">2.1.1 git 安装 <a class="header-anchor" href="#_2-1-1-git-安装" aria-label="Permalink to &quot;2.1.1 git 安装&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># enter 到底</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看git版本号 验证git安装成功</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git version 1.8.3.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-1-2-配置ssh" tabindex="-1">2.1.2 配置SSH <a class="header-anchor" href="#_2-1-2-配置ssh" aria-label="Permalink to &quot;2.1.2 配置SSH&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Enter到底，最终会生成以下文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /root/.ssh/authorized_keys 允许无密码登录的公钥列表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /root/.ssh/id_rsa 私钥文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /root/.ssh/id_rsa.pub 公钥文件  注意该文件里的内容是接下来要用的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;root&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制公钥文件的内容，添加到GitHub 的 SSH keys 或 任意其他远程仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/.ssh/id_rsa.pub</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-1-3-远程仓库添加-ssh-keys" tabindex="-1">2.1.3 远程仓库添加 SSH keys <a class="header-anchor" href="#_2-1-3-远程仓库添加-ssh-keys" aria-label="Permalink to &quot;2.1.3 远程仓库添加 SSH keys&quot;">​</a></h4><p>（以github为例）</p><ol><li>点击用户头像，进入 settings 页面</li><li>点击左侧菜单，进入 SSH and GPG keys</li><li>点击 new SSH keys</li><li>title =&gt; <code>&lt;你的ip SSH keys&gt;</code> 仅为示例命名</li><li>key type =&gt; 默认选择Authentication Keys</li><li>keys =&gt; 黏贴上面公钥文件里的内容到这边，保存完成。</li></ol><h4 id="_2-1-4-服务器拉取项目" tabindex="-1">2.1.4 服务器拉取项目 <a class="header-anchor" href="#_2-1-4-服务器拉取项目" aria-label="Permalink to &quot;2.1.4 服务器拉取项目&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># root 目录新建 home文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/home</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 home 文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/home</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 免登录拉取前端项目源码,注意服务器首次拉取github会提示确认指纹，点击确定。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指纹一般存于 ~/.ssh/known_hosts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git@github.com:wanglei1900/React18_Vite4_Admin.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-2-安装-nginx-和-jenkins-镜像" tabindex="-1">2.2 安装 nginx 和 jenkins 镜像 <a class="header-anchor" href="#_2-2-安装-nginx-和-jenkins-镜像" aria-label="Permalink to &quot;2.2 安装 nginx 和 jenkins 镜像&quot;">​</a></h3><p>docker 拉取镜像</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拉取jenkins</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看镜像是否安装成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># REPOSITORY        TAG       IMAGE ID       CREATED         SIZE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx             latest    fffffc90d343   2 weeks ago     188MB</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># jenkins/jenkins   lts       5dea1f4edf69   3 weeks ago     470MB</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># hello-world       latest    d2c94e258dcb   14 months ago   13.3kB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>创建docker 相关目录</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建docker的相关目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/{compose,jenkins_home,nginx/conf,html/origin/{master,dev}}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建docker-compose.yml配置文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/compose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 具体配置内容见下面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建nginx.conf配置文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/nginx/conf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 具体配置内容见下面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>最终文件结构</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 各环境代码目录</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">实际项目可能不在同一目录</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">						+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	 //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master分支代码，后续会自动创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">						+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			 //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev分支代码，后续会自动创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins_home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Jenkins工程目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx工程目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>nginx.conf配置</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  nginx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">worker_processes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error_log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /var/log/nginx/error.log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        /var/run/nginx.pid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">events</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    worker_connections</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       /etc/nginx/mime.types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    default_type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  application/octet-stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log_format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    access_log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /var/log/nginx/access.log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sendfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #tcp_nopush     on;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    keepalive_timeout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    gzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		#这里两个环境使用一个nginx.conf文件，也可以单独分开来</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #pro环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #监听的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  8001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #设置日志</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#        access_log  logs/dev.access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #定位到index.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               #linux下HTML文件夹,就是你的前端项目文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /usr/share/nginx/html/origin/master/dist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               root  /home/html/dev/dist;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               #输入网址（server_name：port）后，默认的访问页面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #dev环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #监听的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  8002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #设置日志</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#        access_log  logs/sit.access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #定位到index.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               #linux下HTML文件夹,就是你的前端项目文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /usr/share/nginx/html/origin/dev/dist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               root  /home/html/dev/dist;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               #输入网址（server_name：port）后，默认的访问页面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    include /etc/nginx/conf.d/*.conf;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><p>docker-compose.yml配置</p><p>8080:对应jenkins 容器 8001:对应master环境 容器 8002:对应dev环境 容器</p><ul><li>docker_jenkins 是一个定义的服务名称。</li><li>user: root 指定了 Jenkins 容器使用 root 权限。</li><li>restart: always 表示容器总是在退出时重启。</li><li>image: jenkins/jenkins:lts 指定了 Jenkins 镜像及其版本。</li><li>container_name: jenkins 是容器的名称。</li><li>ports 定义了容器内外端口的映射。</li><li>volumes 定义了主机文件系统路径与容器内路径的挂载关系。</li><li>image: nginx指定了 Nginx 镜像。</li><li>container_name: nginx_dev 是容器的名称。</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新版docker-compose不用写自动引用最新版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># version: &#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networks:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  frontend:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    external:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                      # 容器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  docker_jenkins:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    user:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                 # root权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            # 重启方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 使用的镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # 容器名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TZ=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;JENKINS_OPTS=--prefix=/jenkins_home&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ## 自定义 jenkins 访问前缀（上下文context）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                     # 对外暴露的端口定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 50000:50000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                   # 卷挂载路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/jenkins_home/:/var/jenkins_home</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  docker_nginx_pro:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            # nginx-pro环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx_pro</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8001:8001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/html:/usr/share/nginx/html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	 # 宿主机/docker/html 映射docker容器内的/usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/nginx/logs:/var/log/nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  docker_nginx_dev:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            # nginx-dev环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    restart:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    container_name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx_dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8002:8002</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/html:/usr/share/nginx/html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 		 # 宿主机/docker/html 映射docker容器内的/usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/nginx/logs:/var/log/nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h3 id="_2-3-启动docker" tabindex="-1">2.3 启动docker <a class="header-anchor" href="#_2-3-启动docker" aria-label="Permalink to &quot;2.3 启动docker&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动docker-compose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里我们使用docker-compose.yml配置文件启动，所以不需要另外手动创建容器里，这也是为什么使用docker-compose.yml配置文件的原因</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/compose/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出以下内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># WARN[0000] /docker/compose/docker-compose.yml: \`version\` is obsolete</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># NAME        IMAGE                 COMMAND                   SERVICE            CREATED          STATUS          PORTS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># jenkins     jenkins/jenkins:lts   &quot;/usr/bin/tini -- /u…&quot;   docker_jenkins     16 seconds ago   Up 15 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp, 0.0.0.0:50000-&gt;50000/tcp, :::50000-&gt;50000/tcp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx_pro   nginx                 &quot;/docker-entrypoint.…&quot;   docker_nginx_pro   16 seconds ago   Up 15 seconds   80/tcp, 0.0.0.0:8001-&gt;8001/tcp, :::8001-&gt;8001/tcp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nginx_dev   nginx                 &quot;/docker-entrypoint.…&quot;   docker_nginx_dev   16 seconds ago   Up 15 seconds   80/tcp, 0.0.0.0:8002-&gt;8002/tcp, :::8002-&gt;8002/tcp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_2-4-检查nginx配置" tabindex="-1">2.4 检查nginx配置 <a class="header-anchor" href="#_2-4-检查nginx配置" aria-label="Permalink to &quot;2.4 检查nginx配置&quot;">​</a></h3><p>测试nginx配置是否正确</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目录下创建index.html文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/html/origin/dev/dist</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 黏贴下面的html内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doctype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Document&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;welcome to Nginx&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>浏览器打开 <code>ip:8001</code> 可以看到welcome to Nginx 页面，证明nginx配置正确。</p><h3 id="_2-5-登录jenkins-web端" tabindex="-1">2.5 登录jenkins web端 <a class="header-anchor" href="#_2-5-登录jenkins-web端" aria-label="Permalink to &quot;2.5 登录jenkins web端&quot;">​</a></h3><ol><li>登录 <code>服务器地址:8080/jenkins_home</code> 进入jenkins 的web端</li><li>去服务器上 <code>vim /docker/jenkins_home/secrets/initialAdminPassword</code> 复制初始密码</li><li>回到jenkins 的web端，输入初始密码。</li><li>登录后，安装推荐的插件（不要选择自定义插件）。</li><li>注册管理员账号完成登录</li></ol><br><br><br><h2 id="_3-jenkins-配置" tabindex="-1">3 Jenkins 配置 <a class="header-anchor" href="#_3-jenkins-配置" aria-label="Permalink to &quot;3 Jenkins 配置&quot;">​</a></h2><p>第一遍操作，建议完全照抄。后面再遇到在自己拓展</p><h3 id="_3-1-安装必要插件" tabindex="-1">3.1 安装必要插件 <a class="header-anchor" href="#_3-1-安装必要插件" aria-label="Permalink to &quot;3.1 安装必要插件&quot;">​</a></h3><p>dashbord =&gt; Manage Jenkins（系统管理） =&gt; plugin（插件） =&gt; Available plugins</p><ol><li>local (如果界面是全英文还需要安装中文插件,如果已经有部分中文请跳过这个插件)</li><li>Publish Over SSH 配置远程服务器</li><li>NodeJS 服务端打包</li><li>Git Parameter 参数化构建</li></ol><p><img src="`+p+'" alt="插件步骤1" loading="lazy"></p><p><img src="'+e+'" alt="插件步骤2" loading="lazy"></p><h3 id="_3-2-publish-over-ssh-配置远程服务器" tabindex="-1">3.2 Publish Over SSH 配置远程服务器 <a class="header-anchor" href="#_3-2-publish-over-ssh-配置远程服务器" aria-label="Permalink to &quot;3.2 Publish Over SSH 配置远程服务器&quot;">​</a></h3><p>dashbord =&gt; Manage Jenkins（系统管理） =&gt; 系统配置 =&gt; ctrl F <code>Publish over SSH</code></p><ol><li>找到SSH Servers 并新增</li><li>填写 name 自定义填写名称（示例：jenkins_node）</li><li>填写 Hostname 服务器ip地址</li><li>填写 Username 服务器登录名称</li><li>填写 Remote Directory 登录后访问的地址</li><li>点击 高级 弹出额外配置</li><li>勾选 Use password authentication, or use a different key。</li><li>出现 Passphrase / Password，输入服务器登录密码</li><li>检查默认port 是否为22 。一般不用修改</li><li>点击 Test Configuration，显示success则 jenkins 配置SSH远程服务器成功</li><li>点击 应用按钮 点击 保存按钮</li></ol><p><img src="'+h+'" alt="SSH步骤1" loading="lazy"></p><p><img src="'+t+'" alt="SSH步骤2" loading="lazy"></p><p><img src="'+k+'" alt="SSH步骤3" loading="lazy"></p><h3 id="_3-3-nodejs配置" tabindex="-1">3.3 NodeJS配置 <a class="header-anchor" href="#_3-3-nodejs配置" aria-label="Permalink to &quot;3.3 NodeJS配置&quot;">​</a></h3><p>dashbord =&gt; Manage Jenkins（系统管理） =&gt; 全局工具配置 =&gt; ctrl F <code>NodeJS 安装</code></p><ol><li>新增 NodeJS</li><li>填写 别名 自定义填写名称，照抄下面的版本号（示例：NodeJS 22.4.1）</li><li>选择 NodeJS版本，之前已经下载好插件，这里应该自动跳出来的</li><li>点击 应用按钮 点击 保存按钮</li></ol><p><img src="'+r+'" alt="nodejs步骤1" loading="lazy"></p><p><img src="'+d+'" alt="nodejs步骤2" loading="lazy"></p><p><img src="'+c+'" alt="nodejs步骤3" loading="lazy"></p><h3 id="_3-4-凭据配置" tabindex="-1">3.4 凭据配置 <a class="header-anchor" href="#_3-4-凭据配置" aria-label="Permalink to &quot;3.4 凭据配置&quot;">​</a></h3><p>dashbord =&gt; Manage Jenkins（系统管理） =&gt; 凭据管理 =&gt; 全局 按钮下拉选择 添加凭据</p><p>此处以添加github仓库为例</p><ol><li>填写 用户名 github用户名</li><li>填写 密码 github密码</li><li>填写 描述 github 登录凭证</li><li>点击 创建 按钮</li></ol><p><img src="'+o+'" alt="凭证步骤1" loading="lazy"></p><p><img src="'+g+'" alt="凭证步骤2" loading="lazy"></p><p><img src="'+F+'" alt="凭证步骤3" loading="lazy"></p><h3 id="_3-5-创建任务" tabindex="-1">3.5 创建任务 <a class="header-anchor" href="#_3-5-创建任务" aria-label="Permalink to &quot;3.5 创建任务&quot;">​</a></h3><p>dashbord =&gt; 点击屏幕中间 create a job</p><ol><li>名称填写 你的项目名字（示例：React_PC）</li><li>点击 构建一个自由风格的软件项目</li><li>点击 确定按钮</li><li>点击 github项目 填写项目URL</li><li>源码管理 勾选git</li><li>填写 Repository URL 这里用github仓库的http地址</li><li>Credentials 选择之前配置的凭证</li><li>指定分支暂时填写 */dev</li><li>点击 应用按钮 点击 保存按钮</li><li>点击立即构建按钮</li></ol><p><img src="'+b+'" alt="创建项目步骤1" loading="lazy"></p><p><img src="'+m+'" alt="创建项目步骤2" loading="lazy"></p><p><img src="'+y+'" alt="创建项目步骤3" loading="lazy"></p><p><img src="'+u+'" alt="创建项目步骤4" loading="lazy"></p><h3 id="_3-6-github-webhooks-配置" tabindex="-1">3.6 Github webHooks 配置 <a class="header-anchor" href="#_3-6-github-webhooks-配置" aria-label="Permalink to &quot;3.6 Github webHooks 配置&quot;">​</a></h3><p>github代码仓库 =&gt; Settings =&gt; Webhooks</p><ol><li>填写 Payload URL <a href="http://ip:8080/jenkins_home/github-webhook/" target="_blank" rel="noreferrer">http://ip:8080/jenkins_home/github-webhook/</a></li><li>选择 Content type application/json</li><li>点击 add webbhook 按钮</li></ol><p>jenjins =&gt; dashbord =&gt; 点击之前创建的项目 =&gt; 配置</p><ol><li>点击 构建触发器</li><li>勾选 <code>GitHub hook trigger for GITScm polling</code></li></ol><p><img src="'+E+'" alt="webhook步骤1" loading="lazy"></p><p><img src="'+C+'" alt="webhook步骤2" loading="lazy"></p><p><img src="'+A+'" alt="webhook步骤3" loading="lazy"></p><p><img src="'+B+'" alt="webhook步骤4" loading="lazy"></p><h3 id="_3-7-构建环境" tabindex="-1">3.7 构建环境 <a class="header-anchor" href="#_3-7-构建环境" aria-label="Permalink to &quot;3.7 构建环境&quot;">​</a></h3><p>ctrl F <code>构建环境</code></p><ol><li>点击 构建环境</li><li>勾选 <code>Provide Node &amp; npm bin/ folder to PATH</code></li><li>选择 我们刚刚配置过的nodejs版本</li><li>点击 应用按钮</li></ol><p><img src="'+D+'" alt="构建环境" loading="lazy"></p><h3 id="_3-8-build-steps" tabindex="-1">3.8 Build Steps <a class="header-anchor" href="#_3-8-build-steps" aria-label="Permalink to &quot;3.8 Build Steps&quot;">​</a></h3><p>ctrl F <code>Build Steps</code></p><ol><li>增加构建步骤</li><li>选择 <code>Execute NodeJS script</code></li><li>选择 我们刚刚配置过的nodejs版本</li><li>点击 应用、保存按钮</li><li>构建项目测试目前为止步骤是否正确，并学会手动构建流程</li></ol><p><img src="'+_+'" alt="build step 步骤1" loading="lazy"></p><p><img src="'+v+`" alt="build step 步骤2" loading="lazy"></p><h3 id="_3-9-执行shell" tabindex="-1">3.9 执行shell <a class="header-anchor" href="#_3-9-执行shell" aria-label="Permalink to &quot;3.9 执行shell&quot;">​</a></h3><p>dashbord =&gt; 点击之前创建的项目 =&gt; 配置 =&gt; ctrl F <code>Build Steps</code></p><ol><li>增加构建步骤</li><li>选择 执行shell</li><li>填写下面bash指令</li><li>点击 应用、保存按钮</li><li>构建项目测试，控制台输出应该能看到打印nodejs版本和npm 版本</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Node.js 版本：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm 版本：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PATH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+x+'" alt="执行shell步骤1" loading="lazy"></p><p><img src="'+q+`" alt="执行shell步骤2" loading="lazy"></p><p>dashbord =&gt; 点击之前创建的项目 =&gt; 配置 =&gt; ctrl F <code>执行shell</code></p><ol><li>填写下面bash指令</li><li>点击 应用、保存按钮</li><li>构建项目测试，控制台输出应该能看到依赖安装成功和打包成功字样</li><li><code>ls /docker/html/origin/dev/dist/</code> 应该还能查看到dist文件夹下的前端打包项目</li><li>上面步骤成功后，远程仓库dev分支push一次测试提交，jenkins会触发自动构建</li><li>如果没有自动构建成功，可能是网络问题。先去github查看该webhook触发了没有，再去jenkins web端 Github Hook log选项查看推送日志</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Node.js 版本：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm 版本：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm install 失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;依赖安装成功&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 清理旧的 dist 目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里是用你项目里的打包脚本，比如你的可能是npm run build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:jenkins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;构建失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;构建成功&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><img src="`+f+'" alt="执行shell步骤3" loading="lazy"></p><p><img src="'+j+'" alt="执行shell步骤4" loading="lazy"></p><p><img src="'+S+`" alt="执行shell步骤5" loading="lazy"></p><h3 id="_3-10-自动部署到对应环境" tabindex="-1">3.10 自动部署到对应环境 <a class="header-anchor" href="#_3-10-自动部署到对应环境" aria-label="Permalink to &quot;3.10 自动部署到对应环境&quot;">​</a></h3><p>dashbord =&gt; 点击之前创建的项目 =&gt; 配置 =&gt; ctrl F <code>执行shell</code></p><ol><li>填写下面bash指令</li><li>点击应用按钮</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;当前打包项目 Github 仓库分支：&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GIT_BRANCH&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $GIT_BRANCH</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Node.js 版本：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm 版本：&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm install 失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;依赖安装成功&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 清理旧的 dist 目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里是用你项目里的打包脚本，比如你的可能是npm run build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:jenkins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;构建失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;构建成功&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;构建未生成 dist 目录&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;开始打包...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 每次构建删除已存在的dist压缩包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zcvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 将dist文件压缩成dist.tar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;打包成功&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;打包失败&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;构建和打包完成&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PATH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>这里先明确一点，本次部署到宿主机的环境地址，为什么路径写成这样，是为了后续参数化构建的时候，可以动态获取分支名，然后根据分支名动态部署到对应环境。 生产环境 master分支部署到 <code>/docker/html/origin/master/dist/</code> 开发环境 dev分支部署到 <code>/docker/html/origin/dev/dist/</code></p><ol><li>增加构建步骤</li><li>选择 <code>Send files or execute commands over SSH</code></li><li>填写 服务名称Name 为 jenkins_node</li><li>填写 源文件Source 为 files dist.tar</li><li>填写 目标路径Remote directory 为 /dokcer/html/origin/dev</li><li>填写 执行脚本Exec command 如下</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/html/dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   dist/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+w+'" alt="构建后步骤1" loading="lazy"></p><p><img src="'+P+`" alt="构建后步骤2" loading="lazy"></p><p>让我们捋一捋以上步骤做了哪些事情？ 正式生产 宿主机和docker大概率不是部署在一台服务器上的，这里我们自己学习使用了一台服务器</p><ol><li>删除docker容器内，之前打包的dist下所有文件</li><li>docker容器内，打包本次源文件为dist.tar</li><li>连接到宿主机（远程服务器），放在<code>/docker/html/origin/dev</code>文件价下</li><li>解压缩dist.tar，并且删除压缩包</li></ol><ul><li>Source files：准备发送的文件，该文件是相对于这个项目的workspace目录。例如要发送/docker/jenkins_home/workspace/gitlab_web/dist.- tar到目标目录，则设置Source files为dist.tar</li><li>Remove prefix：目标文件前缀添加，例如要操作src下面的某个文件，就设置成src,本案例是跟目录，无需设置</li><li>Remote directory：目标目录，本案例要复制到dev环境下的dist文件，/docker/html/dev</li><li>Exec command：最后执行的命令，可在这里进行解压，删除，复制等操作</li></ul><p>到这里，访问你的项目地址 <code>localhost:8082</code> 就可以看到你打包好的前端项目了</p><h3 id="_3-11-参数化构建" tabindex="-1">3.11 参数化构建 <a class="header-anchor" href="#_3-11-参数化构建" aria-label="Permalink to &quot;3.11 参数化构建&quot;">​</a></h3><p>前面我们都是手动构建dev分支，现在我们使用参数化构建，可以动态获取分支名，然后根据分支名动态部署到对应环境</p><p>dashbord =&gt; 点击之前创建的项目 =&gt; 配置 =&gt; ctrl F <code>参数化构建过程</code></p><ol><li>添加参数，选择GIT参数</li><li>填写 名称 为 <code>BRANCH</code></li><li>填写 描述 为 生产环境 <code>origin/master</code> 开发环境 <code>origin/dev</code></li><li>填写 默认值 为 <code>origin/dev</code></li></ol><p>ctrl F <code>Branches to build</code></p><ol><li>填写 指定分支 由之前的 <code>origin/dev</code> 变成 <code>$BRANCH</code></li></ol><p>ctrl F <code>Transfer Set</code></p><ol><li>填写 Remote directory 由之前的 <code>/docker/html/origin/dev</code> 变成 <code>/docker/html/\${GIT_BRANCH}</code></li><li>填写 Exec command 如下</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /docker/html/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${GIT_BRANCH}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   dist/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+J+'" alt="参数化构建步骤1" loading="lazy"></p><p><img src="'+H+'" alt="参数化构建步骤2" loading="lazy"></p><p><img src="'+z+'" alt="参数化构建步骤3" loading="lazy"></p><p>这里需要强调几点</p><ol><li>由于我们本次jenkins构建使用的自由风格，相对pipeline(流水线)的方式没有那么灵活，比如webhook推送不同分支，如果不使用参数化构建则必须写死分支名，使用了参数化构建也只能使用默认值，本次是<code>origin/dev</code>即dev分支</li><li>为什么前面项目的路径要用<code>origin/*</code>，因为构建分支是动态获取当前仓库的分支的，默认是带origin前缀的</li><li>目前配置能达到的效果是dev分支会可以根据webhook自动推送到jenkins触发自动更新，master主分支则需要手动触发更新。</li></ol>',138)]))}const L=i(N,[["render",T]]);export{U as __pageData,L as default};
