import{_ as i,c as a,o as n,a7 as l}from"./chunks/framework.Dtft01Yp.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/core/javascript/base/operator.md","filePath":"frontend/core/javascript/base/operator.md","lastUpdated":1751966758000}'),h={name:"frontend/core/javascript/base/operator.md"};function p(e,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="一、一元操作符" tabindex="-1">一、一元操作符 <a class="header-anchor" href="#一、一元操作符" aria-label="Permalink to &quot;一、一元操作符&quot;">​</a></h2><blockquote><p>只操作一个值的操作符叫一元操作符</p></blockquote><p>递增递减操作符</p><ul><li><p>前缀递增递减符号<code>++a; --a;</code>,变量a的值会在语句求值前被改变，具有副作用</p></li><li><p>后缀递增递减符号<code>a++; a--;</code>,变量a的值会在语句求值后被改变，不会改变语句执行的结果。</p></li></ul><p>对于递增递减操作符，与其他数据类型使用</p><ol><li>数值字符串转变为数值再计算，非数值字符串转变为NaN再计算</li><li>布尔值false变为0再计算，布尔值true变为1再计算</li><li>浮点数加1或减1</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成数值3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成数值1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成0.1000...09(浮点数不精确)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成-2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="二、一元-或" tabindex="-1">二、一元+或- <a class="header-anchor" href="#二、一元-或" aria-label="Permalink to &quot;二、一元+或-&quot;">​</a></h2><blockquote><p>一元+或-用法同数学。</p></blockquote><p>单独使用一元+或-应用到非数值，执行Number()类型转换。布尔值转为0或1，字符串根据规则解析，对象调用valueOf或toString，+和-同理。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成数值1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s2;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s3;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成数值0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值仍是1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值变成-1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="三、位操作符" tabindex="-1">三、位操作符 <a class="header-anchor" href="#三、位操作符" aria-label="Permalink to &quot;三、位操作符&quot;">​</a></h2><p>？</p><h2 id="四、布尔操作符" tabindex="-1">四、布尔操作符 <a class="header-anchor" href="#四、布尔操作符" aria-label="Permalink to &quot;四、布尔操作符&quot;">​</a></h2><p>参考<a href="https://www.cnblogs.com/wanglei1900/p/16104141.html" target="_blank">if语句和&amp;&amp;逻辑与将数据类型作为标识符</a></p><ol><li>逻辑非 ！</li><li>逻辑与 &amp;&amp; 全真为真，一假则假。注意逻辑短路</li><li>逻辑或 || 全假为假，一真则真。注意逻辑短路</li></ol><h2 id="五、乘性操作符" tabindex="-1">五、乘性操作符 <a class="header-anchor" href="#五、乘性操作符" aria-label="Permalink to &quot;五、乘性操作符&quot;">​</a></h2><ol><li>*乘</li><li>/除</li><li>%取余</li></ol><h2 id="六、加性操作符" tabindex="-1">六、加性操作符 <a class="header-anchor" href="#六、加性操作符" aria-label="Permalink to &quot;六、加性操作符&quot;">​</a></h2><p>加法操作符+如下，减法操作符同理</p><ul><li>数值直接相加</li><li>两个字符串直接拼接，一个字符串一个数值先将数值转换为字符串再拼接。</li><li>有NaN则返回Nan</li><li><code>Infinity + Infinity = Infinty; -Infinity + -Infinity = -Infinty; Infinity + -Infinity = NaN;</code></li><li><code>+0 + +0 = +0; -0 + +0 = +0; -0 + -0 = -0;</code></li><li>undefined null 则调用String()，返回&quot;undefined&quot;和&quot;null&quot;</li></ul><h2 id="七、关系操作符" tabindex="-1">七、关系操作符 <a class="header-anchor" href="#七、关系操作符" aria-label="Permalink to &quot;七、关系操作符&quot;">​</a></h2><blockquote><p>&lt; &gt; &lt;= &gt;=同数学规则，结果返回布尔值</p></blockquote><ol><li>两个相同类型字符串比较，按照字符编码。</li><li>一个字符串一个数值，则将字符串转化为数值再比较。</li><li>只要有NaN,则返回false。</li></ol><h2 id="八、-相等操作符" tabindex="-1">八、 相等操作符 <a class="header-anchor" href="#八、-相等操作符" aria-label="Permalink to &quot;八、 相等操作符&quot;">​</a></h2><p>等于和不等于 == 和!=</p><ol><li>先强制转化类型再比较</li><li><code>null == undefined // true</code>,且null和undefined不能转化为其他类型进行比较</li><li>有NaN则返回false</li></ol><p>全等和不全等 === 和!==</p><ol><li>不会转化类型直接比较</li><li>!==代表在不转化的前提下不想等返回true</li><li><code>null === undefined // false</code>，数据类型不同</li><li>推荐使用全等和不全等操作符，以免遇到类型转化问题</li></ol><h2 id="九、条件操作符" tabindex="-1">九、条件操作符 <a class="header-anchor" href="#九、条件操作符" aria-label="Permalink to &quot;九、条件操作符&quot;">​</a></h2><p>三元表达式，三元表达式可以嵌套但是缺乏可读性</p><p>a = 表达式 ? 真走这 : 假走这</p><h2 id="十、赋值操作符" tabindex="-1">十、赋值操作符 <a class="header-anchor" href="#十、赋值操作符" aria-label="Permalink to &quot;十、赋值操作符&quot;">​</a></h2><p>let num =10，将右手的值赋给左手 += 或 *=这类复合赋值仅仅是简写语法，不会提升任何性能</p><h2 id="十一、逗号操作符" tabindex="-1">十一、逗号操作符 <a class="header-anchor" href="#十一、逗号操作符" aria-label="Permalink to &quot;十一、逗号操作符&quot;">​</a></h2><p><code>let num1 = 1, num2 = 2, num3 = 3</code></p>`,36)]))}const c=i(h,[["render",p]]);export{o as __pageData,c as default};
