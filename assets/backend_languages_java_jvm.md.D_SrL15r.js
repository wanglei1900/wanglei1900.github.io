import{_ as d,C as o,c as E,o as l,a7 as t,b as e,w as i,a as r,G as n,a8 as h}from"./chunks/framework.Dtft01Yp.js";const C=JSON.parse('{"title":"JVM原理学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"backend/languages/java/jvm.md","filePath":"backend/languages/java/jvm.md","lastUpdated":1752569659000}'),p={name:"backend/languages/java/jvm.md"};function A(u,a,k,B,b,c){const s=o("Mermaid");return l(),E("div",null,[a[4]||(a[4]=t('<h1 id="jvm原理学习笔记" tabindex="-1">JVM原理学习笔记 <a class="header-anchor" href="#jvm原理学习笔记" aria-label="Permalink to &quot;JVM原理学习笔记&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ol><li>JVM概述</li><li>JVM体系结构</li><li>类加载子系统</li><li>运行时数据区</li><li>执行引擎</li><li>垃圾回收机制</li><li>JVM调优简介</li><li>常见JVM参数</li><li>总结</li></ol><hr><h2 id="_1-jvm概述" tabindex="-1">1. JVM概述 <a class="header-anchor" href="#_1-jvm概述" aria-label="Permalink to &quot;1. JVM概述&quot;">​</a></h2><p><strong>Java虚拟机(JVM)</strong> 是Java程序运行的核心环境，主要特点：</p><ul><li>平台无关性：一次编译，到处运行（Write Once, Run Anywhere）</li><li>语言无关性：支持多种JVM语言（Kotlin, Scala, Groovy等）</li><li>自动内存管理：垃圾回收机制</li><li>安全沙箱：限制代码执行权限</li></ul><p><strong>JVM vs JRE vs JDK</strong>：</p><ul><li>JVM：Java程序执行环境</li><li>JRE = JVM + 核心类库</li><li>JDK = JRE + 开发工具（javac, jdb等）</li></ul><hr><h2 id="_2-jvm体系结构" tabindex="-1">2. JVM体系结构 <a class="header-anchor" href="#_2-jvm体系结构" aria-label="Permalink to &quot;2. JVM体系结构&quot;">​</a></h2>',11)),(l(),e(h,null,{default:i(()=>[n(s,{id:"mermaid-106",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5BJVM%5D%20--%3E%20B%5B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F%5D%0A%20%20%20%20A%20--%3E%20C%5B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%5D%0A%20%20%20%20A%20--%3E%20D%5B%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E%5D%0A%20%20%20%20A%20--%3E%20E%5B%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3%20JNI%5D%0A%20%20%20%20A%20--%3E%20F%5B%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E5%BA%93%5D%0A%20%20%20%20%0A%20%20%20%20C%20--%3E%20G%5B%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89%E5%8C%BA%5D%0A%20%20%20%20C%20--%3E%20H%5B%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%8C%BA%5D%0A%20%20%20%20%0A%20%20%20%20G%20--%3E%20I%5B%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%5D%0A%20%20%20%20G%20--%3E%20J%5BJava%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%5D%0A%20%20%20%20G%20--%3E%20K%5B%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88%5D%0A%20%20%20%20%0A%20%20%20%20H%20--%3E%20L%5BJava%E5%A0%86%5D%0A%20%20%20%20H%20--%3E%20M%5B%E6%96%B9%E6%B3%95%E5%8C%BA%5D%0A"})]),fallback:i(()=>a[0]||(a[0]=[r(" Loading... ")])),_:1})),a[5]||(a[5]=t('<hr><h2 id="_3-类加载子系统" tabindex="-1">3. 类加载子系统 <a class="header-anchor" href="#_3-类加载子系统" aria-label="Permalink to &quot;3. 类加载子系统&quot;">​</a></h2><h3 id="_3-1-类加载过程" tabindex="-1">3.1 类加载过程 <a class="header-anchor" href="#_3-1-类加载过程" aria-label="Permalink to &quot;3.1 类加载过程&quot;">​</a></h3><ol><li><strong>加载</strong>：查找并加载字节码文件</li><li><strong>链接</strong>： <ul><li>验证：确保字节码安全合规</li><li>准备：为静态变量分配内存</li><li>解析：符号引用转直接引用</li></ul></li><li><strong>初始化</strong>：执行静态代码块和赋值</li></ol><h3 id="_3-2-类加载器层次" tabindex="-1">3.2 类加载器层次 <a class="header-anchor" href="#_3-2-类加载器层次" aria-label="Permalink to &quot;3.2 类加载器层次&quot;">​</a></h3><ol><li><strong>启动类加载器</strong>：加载核心Java类</li><li><strong>扩展类加载器</strong>：加载扩展库</li><li><strong>应用类加载器</strong>：加载用户类路径</li><li><strong>自定义加载器</strong>：用户扩展加载机制</li></ol><h3 id="_3-3-双亲委派模型" tabindex="-1">3.3 双亲委派模型 <a class="header-anchor" href="#_3-3-双亲委派模型" aria-label="Permalink to &quot;3.3 双亲委派模型&quot;">​</a></h3>',7)),(l(),e(h,null,{default:i(()=>[n(s,{id:"mermaid-176",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%5D%20--%3E%20B%5B%E5%BA%94%E7%94%A8%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%5D%0A%20%20%20%20B%20--%3E%20C%5B%E6%89%A9%E5%B1%95%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%5D%0A%20%20%20%20C%20--%3E%20D%5B%E5%90%AF%E5%8A%A8%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%5D%0A"})]),fallback:i(()=>a[1]||(a[1]=[r(" Loading... ")])),_:1})),a[6]||(a[6]=t('<ul><li>工作原则：先委派父类加载器尝试加载</li><li>优势：避免类重复加载，保证核心API安全</li></ul><hr><h2 id="_4-运行时数据区" tabindex="-1">4. 运行时数据区 <a class="header-anchor" href="#_4-运行时数据区" aria-label="Permalink to &quot;4. 运行时数据区&quot;">​</a></h2><h3 id="_4-1-程序计数器" tabindex="-1">4.1 程序计数器 <a class="header-anchor" href="#_4-1-程序计数器" aria-label="Permalink to &quot;4.1 程序计数器&quot;">​</a></h3><ul><li>线程私有</li><li>记录当前线程执行位置</li><li>唯一无OOM(OutOfMemoryError)的区域</li></ul><h3 id="_4-2-java虚拟机栈" tabindex="-1">4.2 Java虚拟机栈 <a class="header-anchor" href="#_4-2-java虚拟机栈" aria-label="Permalink to &quot;4.2 Java虚拟机栈&quot;">​</a></h3><ul><li>线程私有</li><li>存储栈帧（局部变量表、操作数栈、动态链接、方法出口）</li><li>可能异常： <ul><li>StackOverflowError（栈深度过大）</li><li>OutOfMemoryError（扩展失败）</li></ul></li></ul><h3 id="_4-3-本地方法栈" tabindex="-1">4.3 本地方法栈 <a class="header-anchor" href="#_4-3-本地方法栈" aria-label="Permalink to &quot;4.3 本地方法栈&quot;">​</a></h3><ul><li>为Native方法服务</li><li>结构与Java虚拟机栈类似</li></ul><h3 id="_4-4-java堆" tabindex="-1">4.4 Java堆 <a class="header-anchor" href="#_4-4-java堆" aria-label="Permalink to &quot;4.4 Java堆&quot;">​</a></h3><ul><li>线程共享</li><li>对象实例存储区</li><li>GC主要区域</li><li>分代结构： <ul><li>新生代（Eden + Survivor0 + Survivor1）</li><li>老年代</li><li>元空间（JDK8+替代永久代）</li></ul></li><li>可能异常：OutOfMemoryError</li></ul><h3 id="_4-5-方法区" tabindex="-1">4.5 方法区 <a class="header-anchor" href="#_4-5-方法区" aria-label="Permalink to &quot;4.5 方法区&quot;">​</a></h3><ul><li>线程共享</li><li>存储： <ul><li>类信息</li><li>常量</li><li>静态变量</li><li>JIT编译代码</li></ul></li><li>JDK8+使用元空间（Metaspace）实现</li><li>可能异常：OutOfMemoryError</li></ul><h3 id="_4-6-运行时常量池" tabindex="-1">4.6 运行时常量池 <a class="header-anchor" href="#_4-6-运行时常量池" aria-label="Permalink to &quot;4.6 运行时常量池&quot;">​</a></h3><ul><li>方法区的一部分</li><li>存储： <ul><li>字面量</li><li>符号引用</li><li>编译期生成的各种常量</li></ul></li></ul><hr><h2 id="_5-执行引擎" tabindex="-1">5. 执行引擎 <a class="header-anchor" href="#_5-执行引擎" aria-label="Permalink to &quot;5. 执行引擎&quot;">​</a></h2><h3 id="_5-1-核心组件" tabindex="-1">5.1 核心组件 <a class="header-anchor" href="#_5-1-核心组件" aria-label="Permalink to &quot;5.1 核心组件&quot;">​</a></h3><ol><li><strong>解释器</strong>：逐条解释字节码</li><li><strong>JIT编译器</strong>：热点代码编译成本地机器码</li><li><strong>垃圾收集器</strong>：自动内存回收</li></ol><h3 id="_5-2-工作流程" tabindex="-1">5.2 工作流程 <a class="header-anchor" href="#_5-2-工作流程" aria-label="Permalink to &quot;5.2 工作流程&quot;">​</a></h3>',20)),(l(),e(h,null,{default:i(()=>[n(s,{id:"mermaid-413",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20Java%E4%BB%A3%E7%A0%81-%3E%3E%E7%BC%96%E8%AF%91%E5%99%A8%EF%BC%9A%20javac%E7%BC%96%E8%AF%91%0A%20%20%20%20%E7%BC%96%E8%AF%91%E5%99%A8-%3E%3E%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%9A%20.class%E6%96%87%E4%BB%B6%0A%20%20%20%20%E5%AD%97%E8%8A%82%E7%A0%81-%3E%3E%E8%A7%A3%E9%87%8A%E5%99%A8%EF%BC%9A%20%E9%80%90%E8%A1%8C%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%0A%20%20%20%20%E8%A7%A3%E9%87%8A%E5%99%A8-%3E%3EJIT%EF%BC%9A%20%E6%A3%80%E6%B5%8B%E7%83%AD%E7%82%B9%E4%BB%A3%E7%A0%81%0A%20%20%20%20JIT-%3E%3E%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%EF%BC%9A%20%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96%0A%20%20%20%20%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81-%3E%3E%E6%89%A7%E8%A1%8C%EF%BC%9A%20%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8C%0A"})]),fallback:i(()=>a[2]||(a[2]=[r(" Loading... ")])),_:1})),a[7]||(a[7]=t(`<h3 id="_5-3-jit优化技术" tabindex="-1">5.3 JIT优化技术 <a class="header-anchor" href="#_5-3-jit优化技术" aria-label="Permalink to &quot;5.3 JIT优化技术&quot;">​</a></h3><ul><li>方法内联</li><li>逃逸分析</li><li>公共子表达式消除</li><li>循环展开</li><li>锁消除</li></ul><hr><h2 id="_6-垃圾回收机制" tabindex="-1">6. 垃圾回收机制 <a class="header-anchor" href="#_6-垃圾回收机制" aria-label="Permalink to &quot;6. 垃圾回收机制&quot;">​</a></h2><h3 id="_6-1-对象存活判定" tabindex="-1">6.1 对象存活判定 <a class="header-anchor" href="#_6-1-对象存活判定" aria-label="Permalink to &quot;6.1 对象存活判定&quot;">​</a></h3><ol><li><strong>引用计数法</strong>：循环引用问题</li><li><strong>可达性分析</strong>：GC Roots引用链 <ul><li>GC Roots包括： <ul><li>栈中引用的对象</li><li>方法区静态属性引用的对象</li><li>方法区常量引用的对象</li><li>本地方法栈JNI引用的对象</li></ul></li></ul></li></ol><h3 id="_6-2-垃圾回收算法" tabindex="-1">6.2 垃圾回收算法 <a class="header-anchor" href="#_6-2-垃圾回收算法" aria-label="Permalink to &quot;6.2 垃圾回收算法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>算法</th><th>原理</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>标记-清除</td><td>标记可回收对象后清除</td><td>简单</td><td>内存碎片</td></tr><tr><td>复制</td><td>存活对象复制到新空间</td><td>无碎片</td><td>空间浪费</td></tr><tr><td>标记-整理</td><td>标记后整理到连续空间</td><td>无碎片</td><td>效率较低</td></tr><tr><td>分代收集</td><td>不同代使用不同算法</td><td>高效</td><td>实现复杂</td></tr></tbody></table><h3 id="_6-3-垃圾收集器" tabindex="-1">6.3 垃圾收集器 <a class="header-anchor" href="#_6-3-垃圾收集器" aria-label="Permalink to &quot;6.3 垃圾收集器&quot;">​</a></h3><table tabindex="0"><thead><tr><th>收集器</th><th>区域</th><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>Serial</td><td>新生代</td><td>复制</td><td>单线程，简单高效</td></tr><tr><td>ParNew</td><td>新生代</td><td>复制</td><td>Serial多线程版</td></tr><tr><td>Parallel Scavenge</td><td>新生代</td><td>复制</td><td>吞吐量优先</td></tr><tr><td>Serial Old</td><td>老年代</td><td>标记-整理</td><td>Serial老年代版</td></tr><tr><td>Parallel Old</td><td>老年代</td><td>标记-整理</td><td>Parallel Scavenge老年代版</td></tr><tr><td>CMS</td><td>老年代</td><td>标记-清除</td><td>低停顿，并发收集</td></tr><tr><td>G1</td><td>全堆</td><td>分区域收集</td><td>可预测停顿，JDK9+默认</td></tr></tbody></table><hr><h2 id="_7-jvm调优简介" tabindex="-1">7. JVM调优简介 <a class="header-anchor" href="#_7-jvm调优简介" aria-label="Permalink to &quot;7. JVM调优简介&quot;">​</a></h2><h3 id="_7-1-调优目标" tabindex="-1">7.1 调优目标 <a class="header-anchor" href="#_7-1-调优目标" aria-label="Permalink to &quot;7.1 调优目标&quot;">​</a></h3><ul><li>减少GC频率和停顿时间</li><li>提高吞吐量</li><li>控制内存占用</li><li>避免OOM</li></ul><h3 id="_7-2-调优步骤" tabindex="-1">7.2 调优步骤 <a class="header-anchor" href="#_7-2-调优步骤" aria-label="Permalink to &quot;7.2 调优步骤&quot;">​</a></h3><ol><li>监控分析（jstat, VisualVM, GC logs）</li><li>识别瓶颈（GC频率、内存泄漏）</li><li>参数调整</li><li>验证优化效果</li></ol><h3 id="_7-3-常见调优场景" tabindex="-1">7.3 常见调优场景 <a class="header-anchor" href="#_7-3-常见调优场景" aria-label="Permalink to &quot;7.3 常见调优场景&quot;">​</a></h3><ul><li>高并发应用：减少GC停顿时间</li><li>大数据处理：增大堆内存</li><li>响应时间敏感：优化新生代大小</li><li>内存泄漏：分析堆转储</li></ul><hr><h2 id="_8-常见jvm参数" tabindex="-1">8. 常见JVM参数 <a class="header-anchor" href="#_8-常见jvm参数" aria-label="Permalink to &quot;8. 常见JVM参数&quot;">​</a></h2><h3 id="_8-1-内存设置" tabindex="-1">8.1 内存设置 <a class="header-anchor" href="#_8-1-内存设置" aria-label="Permalink to &quot;8.1 内存设置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xms1024m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 初始堆大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xmx2048m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 最大堆大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xmn512m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 新生代大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:MetaspaceSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=128m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 元空间初始大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:MaxMetaspaceSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=256m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 元空间最大大小</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_8-2-gc设置" tabindex="-1">8.2 GC设置 <a class="header-anchor" href="#_8-2-gc设置" aria-label="Permalink to &quot;8.2 GC设置&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+UseG1GC</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 启用G1收集器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:MaxGCPauseMillis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 最大GC停顿时间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:ParallelGCThreads</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 并行GC线程数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_8-3-监控诊断" tabindex="-1">8.3 监控诊断 <a class="header-anchor" href="#_8-3-监控诊断" aria-label="Permalink to &quot;8.3 监控诊断&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # OOM时生成堆转储</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:HeapDumpPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=./heapdump.hprof</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 堆转储文件路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+PrintGCDetails</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 打印GC详情</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xloggc:gc.log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # GC日志输出文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_8-4-其他优化" tabindex="-1">8.4 其他优化 <a class="header-anchor" href="#_8-4-其他优化" aria-label="Permalink to &quot;8.4 其他优化&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+UseCompressedOops</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 压缩普通对象指针</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:ReservedCodeCacheSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=256m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # JIT代码缓存大小</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:CICompilerCount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # JIT编译器线程数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h2 id="_9-总结" tabindex="-1">9. 总结 <a class="header-anchor" href="#_9-总结" aria-label="Permalink to &quot;9. 总结&quot;">​</a></h2><ul><li>JVM是Java生态的基石，理解其原理是高级开发的必备技能</li><li>类加载机制保障了Java的安全性和灵活性</li><li>内存模型和GC算法直接影响应用性能</li><li>JVM调优需基于监控数据，避免盲目调整</li><li>现代JVM（如G1、ZGC）持续优化，关注新特性</li></ul><blockquote><p>深入学习建议：</p><ol><li>阅读《深入理解Java虚拟机》</li><li>分析GC日志和堆转储</li><li>使用JMC、VisualVM等工具实践</li><li>关注OpenJDK社区最新发展</li></ol></blockquote>`,32)),(l(),e(h,null,{default:i(()=>[n(s,{id:"mermaid-849",class:"mermaid",graph:"pie%0A%20%20%20%20title%20JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E9%87%8D%E8%A6%81%E6%80%A7%0A%20%20%20%20%E2%80%9C%E5%A0%86%E5%86%85%E5%AD%98%E2%80%9D%20%EF%BC%9A%2070%0A%20%20%20%20%E2%80%9C%E6%96%B9%E6%B3%95%E5%8C%BA%E2%80%9D%20%EF%BC%9A%2015%0A%20%20%20%20%E2%80%9C%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E2%80%9D%20%EF%BC%9A%2010%0A%20%20%20%20%E2%80%9C%E5%85%B6%E4%BB%96%E2%80%9D%20%EF%BC%9A%205%0A"})]),fallback:i(()=>a[3]||(a[3]=[r(" Loading... ")])),_:1}))])}const g=d(p,[["render",A]]);export{C as __pageData,g as default};
